/************************************************************************************
 * Filename: lookup_tables.h
 *
 * Notice:
 *           THIS FILE AUTOMATICALLY GENERATED BY SPREADSHEET
 *                   ModbusMap.xlsm.
 *           MANUAL UPDATES TO THIS FILE WILL BE LOST.
 *
 *
***************************************************************************************
 *
 *
 *=====================================================================================
 * Description:
 *   Header file for the Modbus registers and coil lookup tables. These tables map
 *   the registers/coils from Modbus to the appropriate location (I/O Processor or
 *   Sensor Processor). It also defines attributes such as type and protection.
 *
 * External Interface Functions:
 *   N/A
 *
 * Internal Functions:
 *   N/A
 *
***************************************************************************************/
//
#ifndef _LOOKUP_TABLES_H
#define _LOOKUP_TABLES_H
//
//
#ifdef __cplusplus
extern "C" {
#endif
//#include "types.h"
#include <stdint.h>
#include <stddef.h>
//#include "deviceparams.h"
//
// Structure Definitions
typedef struct
{
    uint16_t  Offset;        // This is the Modbus location. This is the 0 based value.
                             // ie ModbusMap Offset = 101, this will be 100.
    uint16_t  IpcIndex;      // Index for the IPC parameters and I/O Processor Parameters. >255
                             // are IPC and are defined in the ipc_indexes.h shared header file.
    uint8_t   BitMask;       // Bit mask for the U8 parameters. All coils are U8's.
    uint8_t   Access;        // Access permissions based on mode
} tLookupCoils;
//
//
// pointer to function which is used for handling request
typedef uint8_t (*tCmdExecuteFuncPtr)(void* param, void* buffer);
//
// Structure Definitions
// {Par Offset, NV Offset, Check Func, Parameter Offset, Data Type, Data Size, Work Mode Access |
// Service Mode Access | Write Protect}
typedef struct
{
    const char *     name;
    uint16_t            offset;           // This is the Modbus location. This is the 0 based value.
                                          // ie ModbusMap Offset = 101, this will be 100.
    uint16_t            nvAddress;        // NV parameter data offset, NULL means not save in NV
    tCmdExecuteFuncPtr  cmdFuncPtr;       // W/R check function
    uint16_t            paramOffset;      // Parameter name (OFFSET in the parameter structure)
    uint8_t             type;             // Float, U8, U16, U32, ASCII, etc.
    uint8_t             size;             // Number of bytes in parameter. U8 = 1, Float = 4, ASCII size
                                                //  depends on parameter.
    uint8_t             access;           // Access permissions based on mode
} tLookupRegisters;
//
// Work Access
#define LKUP_ACCESS_WORK_NA         0x00
#define LKUP_ACCESS_WORK_R          0x01
#define LKUP_ACCESS_WORK_W          0x02
#define LKUP_ACCESS_WORK_RW         0x03
#define LKUP_ACCESS_WORK_MASK       0x03
//
// Service Access
#define LKUP_ACCESS_SERV_NA         0x00
#define LKUP_ACCESS_SERV_R          0x04
#define LKUP_ACCESS_SERV_W          0x08
#define LKUP_ACCESS_SERV_RW         0x0c
#define LKUP_ACCESS_SERV_MASK       0x0c
//
// Write Protect
#define LKUP_ACCESS_NO_WRITE_PROTECT 0x00
#define LKUP_ACCESS_WRITE_PROTECT    0x10
#define LKUP_ACCESS_WRITE_PROTECT_MASK 0x10
//
// Storage Type
#define LKUP_ACCESS_TYPE_NV          0x20
#define LKUP_ACCESS_TYPE_DYNAMIC     0x40
#define LKUP_ACCESS_TYPE_STATIC      0x80
#define LKUP_ACCESS_TYPE_MASK        (0x20 + 0x80 + 0x40)
//
// Parameter Type
#define LKUP_TYPE_U8                   0
#define LKUP_TYPE_U16                  1
#define LKUP_TYPE_U32                  2
#define LKUP_TYPE_FLOAT                3
#define LKUP_TYPE_ASCII                4
//
#define LKUP_SIZE_U8                   1
#define LKUP_SIZE_U16                  2
#define LKUP_SIZE_U32                  4
#define LKUP_SIZE_FLOAT                4
#define LKUP_SIZE_ASCII                8
//
// Discrete Bit Masks
#define LKUP_COIL_MASK_BIT0  (uint8_t)0x01
#define LKUP_COIL_MASK_BIT1  (uint8_t)0x02
#define LKUP_COIL_MASK_BIT2  (uint8_t)0x04
#define LKUP_COIL_MASK_BIT3  (uint8_t)0x08
#define LKUP_COIL_MASK_BIT4  (uint8_t)0x10
#define LKUP_COIL_MASK_BIT5  (uint8_t)0x20
#define LKUP_COIL_MASK_BIT6  (uint8_t)0x40
#define LKUP_COIL_MASK_BIT7  (uint8_t)0x80

extern const tLookupRegisters g_stLookupRegisters[];
extern const uint16_t g_numLookupRegisters;
//extern tDeviceBasicParams g_deviceDataStorage;
//
#ifdef __cplusplus
}
#endif
#endif // _LOOKUP_TABLES_H
// Register Structure Definition
typedef struct
{
    // Parameter: Data channel 0 : DataChan0 : NV Address: 0
    float DataChan0;
    // Parameter: Data channel 1 : DataChan1 : NV Address: 0
    float DataChan1;
    // Parameter: Data channel 2 : DataChan2 : NV Address: 0
    float DataChan2;
    // Parameter: Data channel 3 : DataChan3 : NV Address: 0
    float DataChan3;
    // Parameter: Protocol version  : protocolVersion : NV Address: 0
    uint16_t protocolVersion;
    // Parameter: Hardware version  : hardwareVersion : NV Address: 2
    uint16_t hardwareVersion;
    // Parameter: Software Version : softwareVersion : NV Address: 4
    uint16_t softwareVersion;
    // Parameter: Software Revision : softwareRevision : NV Address: 6
    uint16_t softwareRevision;
    // Parameter: Device Type : deviceType : NV Address: 8
    uint16_t deviceType;
    // Parameter: Modbus Network Address : modbusAddress : NV Address: 10
    uint16_t modbusAddress;
    // Parameter: Modbus Baudrate : modbusBaud : NV Address: 10
    uint16_t modbusBaud;
    // Parameter: Modbus parity  : modbusParity : NV Address: 10
    uint16_t modbusParity;
    // Parameter: Modbus stopbit  : mbStopBits : NV Address: 10
    uint16_t mbStopBits;
    // Parameter: Brace control  : mbBraceCtrl : NV Address: 10
    uint16_t mbBraceCtrl;
    // Parameter: Serial number  : serialNumber : NV Address: 12
    uint32_t serialNumber;
    // Parameter: Up time  : uptime : NV Address: 16
    uint32_t uptime;
    // Parameter: Device state  : deviceState : NV Address: 16
    uint16_t deviceState;
    // Parameter: DIP State  : disState : NV Address: 16
    uint16_t disState;
    // Parameter: Access type  : accessType : NV Address: 16
    uint16_t accessType;
    // Parameter: Data order : dataOrder : NV Address: 16
    uint16_t dataOrder;
    // Parameter: Modbus comm count  : mbCommCount : NV Address: 18
    uint16_t mbCommCount;
    // Parameter: Modbus comm error  : mbCommError : NV Address: 18
    uint16_t mbCommError;
    // Parameter: Status : deviceStatus : NV Address: 18
    uint16_t deviceStatus;
    // Parameter: Errors : devErrors : NV Address: 18
    uint16_t devErrors;
    // Parameter: Factory date  : factoryDate : NV Address: 18
    uint32_t factoryDate;
    // Parameter: Software CRC32  : softwareCrc32 : NV Address: 22
    uint32_t softwareCrc32;
    // Parameter: Unique ID  : uniqueId : NV Address: 22
    uint8_t uniqueId[12];
    // Parameter: Root Access : root_ Access : NV Address: 26
    uint16_t root_Access;
    // Parameter: On-board temp  : onBoardTemp : NV Address: 26
    float onBoardTemp;
    // Parameter: On-board voltage  : onBoardVoltage : NV Address: 26
    float onBoardVoltage;
    // Parameter: AI count  : aiCount : NV Address: 26
    uint16_t aiCount;
    // Parameter: DI count  : diCount : NV Address: 26
    uint16_t diCount;
    // Parameter: Model  : deviceModel : NV Address: 26
    uint16_t deviceModel;
    // Parameter: Data (Measure/Generate)  : chan0Data : NV Address: 28
    float chan0Data;
    // Parameter: Data flags : chan0DataFlags : NV Address: 28
    uint16_t chan0DataFlags;
    // Parameter: Status : chan0Status : NV Address: 28
    uint16_t chan0Status;
    // Parameter: ϸ颪衪ᮠ젮  : chan0Error : NV Address: 28
    uint16_t chan0Error;
    // Parameter: Quantity  : chan0Quantity : NV Address: 28
    uint32_t chan0Quantity;
    // Parameter: Uptime  : chan0Uptime : NV Address: 28
    uint32_t chan0Uptime;
    // Parameter: Raw Data : chan0RawData : NV Address: 28
    float chan0RawData;
    // Parameter: Raw Data flags : chan0RawDataFlags : NV Address: 28
    uint16_t chan0RawDataFlags;
    // Parameter: Supported signals  : chan0SupportedSignals : NV Address: 28
    uint16_t chan0SupportedSignals;
    // Parameter: Signal Type : chan0SignalType : NV Address: 28
    uint16_t chan0SignalType;
    // Parameter: Additional parameter1 : chan0AdditionalParameter1 : NV Address: 30
    uint8_t chan0AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan0AdditionalParameter2 : NV Address: 42
    uint8_t chan0AdditionalParameter2[12];
    // Parameter: Filter type  : chan0FilterType : NV Address: 54
    uint16_t chan0FilterType;
    // Parameter: Filter Length : chan0FilterLength : NV Address: 54
    uint16_t chan0FilterLength;
    // Parameter: Transfer Function : chan0TransferFunction : NV Address: 56
    uint16_t chan0TransferFunction;
    // Parameter: Transfer signal low limit  : chan0TransferSignalLowLim : NV Address: 58
    float chan0TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan0TransferSignalHighLim : NV Address: 62
    float chan0TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan0TransferScaleLowLim : NV Address: 66
    float chan0TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan0TransferScaleHighLim : NV Address: 70
    float chan0TransferScaleHighLim;
    // Parameter: Bad_Good_Comm  : chan0BadGoodComm : NV Address: 74
    float chan0BadGoodComm;
    // Parameter: Hi alarm_Reley : chan0ReleyHi : NV Address: 74
    uint16_t chan0ReleyHi;
    // Parameter: Lo alarm_Reley : chan0ReleyLo : NV Address: 76
    uint16_t chan0ReleyLo;

    // Parameter: Measured CJ Value  : chan0CjValue : NV Address: 166
    float chan0CjValue;
    // Parameter: Result CJ Value : chan0ResultCjValue : NV Address: 166
    float chan0ResultCjValue;
    // Parameter: Data (Measure/Generate)  : chan1Data : NV Address: 166
    float chan1Data;
    // Parameter: Data flags : chan1DataFlags : NV Address: 166
    uint16_t chan1DataFlags;
    // Parameter: Status : chan1Status : NV Address: 166
    uint16_t chan1Status;
    // Parameter: ϸ颪衪ᮠ젮  : chan1Error : NV Address: 166
    uint16_t chan1Error;
    // Parameter: Quantity  : chan1Quantity : NV Address: 166
    uint32_t chan1Quantity;
    // Parameter: Uptime  : chan1Uptime : NV Address: 166
    uint32_t chan1Uptime;
    // Parameter: Raw Data : chan1RawData : NV Address: 166
    float chan1RawData;
    // Parameter: Raw Data flags : chan1RawDataFlags : NV Address: 166
    uint16_t chan1RawDataFlags;
    // Parameter: Supported signals  : chan1SupportedSignals : NV Address: 166
    uint16_t chan1SupportedSignals;
    // Parameter: Signal Type : chan1SignalType : NV Address: 166
    uint16_t chan1SignalType;
    // Parameter: Additional parameter1 : chan1AdditionalParameter1 : NV Address: 168
    uint8_t chan1AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan1AdditionalParameter2 : NV Address: 180
    uint8_t chan1AdditionalParameter2[12];
    // Parameter: Filter type  : chan1FilterType : NV Address: 192
    uint16_t chan1FilterType;
    // Parameter: Filter Length : chan1FilterLength : NV Address: 192
    uint16_t chan1FilterLength;
    // Parameter: Transfer Function : chan1TransferFunction : NV Address: 194
    uint16_t chan1TransferFunction;
    // Parameter: Transfer signal low limit  : chan1TransferSignalLowLim : NV Address: 196
    float chan1TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan1TransferSignalHighLim : NV Address: 200
    float chan1TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan1TransferScaleLowLim : NV Address: 204
    float chan1TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan1TransferScaleHighLim : NV Address: 208
    float chan1TransferScaleHighLim;
    // Parameter: Bad_Good_Comm  : chan1BadGoodComm : NV Address: 212
    float chan1BadGoodComm;
    // Parameter: Hi alarm_Reley : chan1ReleyHi : NV Address: 212
    uint16_t chan1ReleyHi;
    // Parameter: Lo alarm_Reley : chan1ReleyLo : NV Address: 214
    uint16_t chan1ReleyLo;

    // Parameter: Measured CJ Value  : chan1CjValue : NV Address: 304
    float chan1CjValue;
    // Parameter: Result CJ Value : chan1ResultCjValue : NV Address: 304
    float chan1ResultCjValue;
    // Parameter: Data (Measure/Generate)  : chan2Data : NV Address: 304
    float chan2Data;
    // Parameter: Data flags : chan2DataFlags : NV Address: 304
    uint16_t chan2DataFlags;
    // Parameter: Status : chan2Status : NV Address: 304
    uint16_t chan2Status;
    // Parameter: ϸ颪衪ᮠ젮  : chan2Error : NV Address: 304
    uint16_t chan2Error;
    // Parameter: Quantity  : chan2Quantity : NV Address: 304
    uint32_t chan2Quantity;
    // Parameter: Uptime  : chan2Uptime : NV Address: 304
    uint32_t chan2Uptime;
    // Parameter: Raw Data : chan2RawData : NV Address: 304
    float chan2RawData;
    // Parameter: Raw Data flags : chan2RawDataFlags : NV Address: 304
    uint16_t chan2RawDataFlags;
    // Parameter: Supported signals  : chan2SupportedSignals : NV Address: 304
    uint16_t chan2SupportedSignals;
    // Parameter: Signal Type : chan2SignalType : NV Address: 304
    uint16_t chan2SignalType;
    // Parameter: Additional parameter1 : chan2AdditionalParameter1 : NV Address: 306
    uint8_t chan2AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan2AdditionalParameter2 : NV Address: 318
    uint8_t chan2AdditionalParameter2[12];
    // Parameter: Filter type  : chan2FilterType : NV Address: 330
    uint16_t chan2FilterType;
    // Parameter: Filter Length : chan2FilterLength : NV Address: 330
    uint16_t chan2FilterLength;
    // Parameter: Transfer Function : chan2TransferFunction : NV Address: 332
    uint16_t chan2TransferFunction;
    // Parameter: Transfer signal low limit  : chan2TransferSignalLowLim : NV Address: 334
    float chan2TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan2TransferSignalHighLim : NV Address: 338
    float chan2TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan2TransferScaleLowLim : NV Address: 342
    float chan2TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan2TransferScaleHighLim : NV Address: 346
    float chan2TransferScaleHighLim;
    // Parameter: Bad_Good_Comm  : chan2BadGoodComm : NV Address: 350
    float chan2BadGoodComm;
    // Parameter: Hi alarm_Reley : chan2ReleyHi : NV Address: 350
    uint16_t chan2ReleyHi;
    // Parameter: Lo alarm_Reley : chan2ReleyLo : NV Address: 352
    uint16_t chan2ReleyLo;

    // Parameter: Measured CJ Value  : chan2CjValue : NV Address: 442
    float chan2CjValue;
    // Parameter: Result CJ Value : chan2ResultCjValue : NV Address: 442
    float chan2ResultCjValue;
    // Parameter: Data (Measure/Generate)  : chan3Data : NV Address: 442
    float chan3Data;
    // Parameter: Data flags : chan3DataFlags : NV Address: 442
    uint16_t chan3DataFlags;
    // Parameter: Status : chan3Status : NV Address: 442
    uint16_t chan3Status;
    // Parameter: ϸ颪衪ᮠ젮  : chan3Error : NV Address: 442
    uint16_t chan3Error;
    // Parameter: Quantity  : chan3Quantity : NV Address: 442
    uint32_t chan3Quantity;
    // Parameter: Uptime  : chan3Uptime : NV Address: 442
    uint32_t chan3Uptime;
    // Parameter: Raw Data : chan3RawData : NV Address: 442
    float chan3RawData;
    // Parameter: Raw Data flags : chan3RawDataFlags : NV Address: 442
    uint16_t chan3RawDataFlags;
    // Parameter: Supported signals  : chan3SupportedSignals : NV Address: 442
    uint16_t chan3SupportedSignals;
    // Parameter: Signal Type : chan3SignalType : NV Address: 442
    uint16_t chan3SignalType;
    // Parameter: Additional parameter1 : chan3AdditionalParameter1 : NV Address: 444
    uint8_t chan3AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan3AdditionalParameter2 : NV Address: 456
    uint8_t chan3AdditionalParameter2[12];
    // Parameter: Filter type  : chan3FilterType : NV Address: 468
    uint16_t chan3FilterType;
    // Parameter: Filter Length : chan3FilterLength : NV Address: 468
    uint16_t chan3FilterLength;
    // Parameter: Transfer Function : chan3TransferFunction : NV Address: 470
    uint16_t chan3TransferFunction;
    // Parameter: Transfer signal low limit  : chan3TransferSignalLowLim : NV Address: 472
    float chan3TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan3TransferSignalHighLim : NV Address: 476
    float chan3TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan3TransferScaleLowLim : NV Address: 480
    float chan3TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan3TransferScaleHighLim : NV Address: 484
    float chan3TransferScaleHighLim;
    // Parameter: Bad_Good_Comm  : chan3BadGoodComm : NV Address: 488
    float chan3BadGoodComm;
    // Parameter: Hi alarm_Reley : chan3ReleyHi : NV Address: 488
    uint16_t chan3ReleyHi;
    // Parameter: Lo alarm_Reley : chan3ReleyLo : NV Address: 490
    uint16_t chan3ReleyLo;

    // Parameter: Measured CJ Value  : chan3CjValue : NV Address: 580
    float chan3CjValue;
    // Parameter: Result CJ Value : chan3ResultCjValue : NV Address: 580
    float chan3ResultCjValue;
    // Parameter: CalibOCR100mV : chan0OCR100mV : NV Address: 580
    float chan0OCR100mV;
    // Parameter: CalibFCR100mV : chan0FSR100mV : NV Address: 584
    float chan0FSR100mV;
    // Parameter: CalibFDate100mV : chan0Date100mV : NV Address: 588
    uint32_t chan0Date100mV;
    // Parameter: CalibOCR1V : chan0OCR1V : NV Address: 592
    float chan0OCR1V;
    // Parameter: CalibFCR1V : chan0FSR1V : NV Address: 596
    float chan0FSR1V;
    // Parameter: CalibFDate1V : chan0Date1V : NV Address: 600
    uint32_t chan0Date1V;
    // Parameter: CalibOCR10V : chan0OCR10V : NV Address: 604
    float chan0OCR10V;
    // Parameter: CalibFCR10V : chan0FSR10V : NV Address: 608
    float chan0FSR10V;
    // Parameter: CalibFDate10V : chan0Date10V : NV Address: 612
    uint32_t chan0Date10V;
    // Parameter: CalibOCR30V : chan0OCR30V : NV Address: 616
    float chan0OCR30V;
    // Parameter: CalibFCR30V : chan0FSR30V : NV Address: 620
    float chan0FSR30V;
    // Parameter: CalibFDate30V : chan0Date30V : NV Address: 624
    uint32_t chan0Date30V;
    // Parameter: CalibOCR20mA : chan0OCR20mA : NV Address: 628
    float chan0OCR20mA;
    // Parameter: CalibFCR20mA : chan0FSR20mA : NV Address: 632
    float chan0FSR20mA;
    // Parameter: CalibFDate20mA : chan0Date20mA : NV Address: 636
    uint32_t chan0Date20mA;
    // Parameter: CalibOCR4x : chan0OCR4x : NV Address: 640
    float chan0OCR4x;
    // Parameter: CalibFSR4x : chan0FSR4x : NV Address: 644
    float chan0FSR4x;
    // Parameter: CalibDate4x : chan0Date4x : NV Address: 648
    uint32_t chan0Date4x;
    // Parameter: CalibOCR3x : chan0OCR3x : NV Address: 652
    float chan0OCR3x;
    // Parameter: CalibFSR3x : chan0FSR3x : NV Address: 656
    float chan0FSR3x;
    // Parameter: CalibDate3x : chan0Date3x : NV Address: 660
    uint32_t chan0Date3x;
    // Parameter: CalibOCRinternal : chan0OCRinternal : NV Address: 664
    float chan0OCRinternal;
    // Parameter: CalibFSRinternal : chan0FSRinternal : NV Address: 668
    float chan0FSRinternal;
    // Parameter: CalibDateinternal : chan0DateRinternal : NV Address: 672
    uint32_t chan0DateRinternal;
    // Parameter: CalibOCR100mV : chan1OCR100mV : NV Address: 676
    float chan1OCR100mV;
    // Parameter: CalibFCR100mV : chan1FSR100mV : NV Address: 680
    float chan1FSR100mV;
    // Parameter: CalibFDate100mV : chan1Date100mV : NV Address: 684
    uint32_t chan1Date100mV;
    // Parameter: CalibOCR1V : chan1OCR1V : NV Address: 688
    float chan1OCR1V;
    // Parameter: CalibFCR1V : chan1FSR1V : NV Address: 692
    float chan1FSR1V;
    // Parameter: CalibFDate1V : chan1Date1V : NV Address: 696
    uint32_t chan1Date1V;
    // Parameter: CalibOCR10V : chan1OCR10V : NV Address: 700
    float chan1OCR10V;
    // Parameter: CalibFCR10V : chan1FSR10V : NV Address: 704
    float chan1FSR10V;
    // Parameter: CalibFDate10V : chan1Date10V : NV Address: 708
    uint32_t chan1Date10V;
    // Parameter: CalibOCR30V : chan1OCR30V : NV Address: 712
    float chan1OCR30V;
    // Parameter: CalibFCR30V : chan1FSR30V : NV Address: 716
    float chan1FSR30V;
    // Parameter: CalibFDate30V : chan1Date30V : NV Address: 720
    uint32_t chan1Date30V;
    // Parameter: CalibOCR20mA : chan1OCR20mA : NV Address: 724
    float chan1OCR20mA;
    // Parameter: CalibFCR20mA : chan1FSR20mA : NV Address: 728
    float chan1FSR20mA;
    // Parameter: CalibFDate20mA : chan1Date20mA : NV Address: 732
    uint32_t chan1Date20mA;
    // Parameter: CalibOCR4x : chan1OCR4x : NV Address: 736
    float chan1OCR4x;
    // Parameter: CalibFSR4x : chan1FSR4x : NV Address: 740
    float chan1FSR4x;
    // Parameter: CalibDate4x : chan1Date4x : NV Address: 744
    uint32_t chan1Date4x;
    // Parameter: CalibOCR3x : chan1OCR3x : NV Address: 748
    float chan1OCR3x;
    // Parameter: CalibFSR3x : chan1FSR3x : NV Address: 752
    float chan1FSR3x;
    // Parameter: CalibDate3x : chan1Date3x : NV Address: 756
    uint32_t chan1Date3x;
    // Parameter: CalibOCRinternal : chan1OCRinternal : NV Address: 760
    float chan1OCRinternal;
    // Parameter: CalibFSRinternal : chan1FSRinternal : NV Address: 764
    float chan1FSRinternal;
    // Parameter: CalibDateinternal : chan0DateRinternal : NV Address: 768
    uint32_t chan1DateRinternal;
    // Parameter: CalibOCR100mV : chan2OCR100mV : NV Address: 772
    float chan2OCR100mV;
    // Parameter: CalibFCR100mV : chan2FSR100mV : NV Address: 776
    float chan2FSR100mV;
    // Parameter: CalibFDate100mV : chan2Date100mV : NV Address: 780
    uint32_t chan2Date100mV;
    // Parameter: CalibOCR1V : chan2OCR1V : NV Address: 784
    float chan2OCR1V;
    // Parameter: CalibFCR1V : chan2FSR1V : NV Address: 788
    float chan2FSR1V;
    // Parameter: CalibFDate1V : chan2Date1V : NV Address: 792
    uint32_t chan2Date1V;
    // Parameter: CalibOCR10V : chan2OCR10V : NV Address: 796
    float chan2OCR10V;
    // Parameter: CalibFCR10V : chan2FSR10V : NV Address: 800
    float chan2FSR10V;
    // Parameter: CalibFDate10V : chan2Date10V : NV Address: 804
    uint32_t chan2Date10V;
    // Parameter: CalibOCR30V : chan2OCR30V : NV Address: 808
    float chan2OCR30V;
    // Parameter: CalibFCR30V : chan2FSR30V : NV Address: 812
    float chan2FSR30V;
    // Parameter: CalibFDate30V : chan2Date30V : NV Address: 816
    uint32_t chan2Date30V;
    // Parameter: CalibOCR20mA : chan2OCR20mA : NV Address: 820
    float chan2OCR20mA;
    // Parameter: CalibFCR20mA : chan2FSR20mA : NV Address: 824
    float chan2FSR20mA;
    // Parameter: CalibFDate20mA : chan2Date20mA : NV Address: 828
    uint32_t chan2Date20mA;
    // Parameter: CalibOCR4x : chan2OCR4x : NV Address: 832
    float chan2OCR4x;
    // Parameter: CalibFSR4x : chan2FSR4x : NV Address: 836
    float chan2FSR4x;
    // Parameter: CalibDate4x : chan2Date4x : NV Address: 840
    uint32_t chan2Date4x;
    // Parameter: CalibOCR3x : chan2OCR3x : NV Address: 844
    float chan2OCR3x;
    // Parameter: CalibFSR3x : chan2FSR3x : NV Address: 848
    float chan2FSR3x;
    // Parameter: CalibDate3x : chan2Date3x : NV Address: 852
    uint32_t chan2Date3x;
    // Parameter: CalibOCRinternal : chan2OCRinternal : NV Address: 856
    float chan2OCRinternal;
    // Parameter: CalibFSRinternal : chan2FSRinternal : NV Address: 860
    float chan2FSRinternal;
    // Parameter: CalibDateinternal : chan2DateRinternal : NV Address: 864
    uint32_t chan2DateRinternal;
    // Parameter: CalibOCR100mV : chan3OCR100mV : NV Address: 868
    float chan3OCR100mV;
    // Parameter: CalibFCR100mV : chan3FSR100mV : NV Address: 872
    float chan3FSR100mV;
    // Parameter: CalibFDate100mV : chan3Date100mV : NV Address: 876
    uint32_t chan3Date100mV;
    // Parameter: CalibOCR1V : chan3OCR1V : NV Address: 880
    float chan3OCR1V;
    // Parameter: CalibFCR1V : chan3FSR1V : NV Address: 884
    float chan3FSR1V;
    // Parameter: CalibFDate1V : chan3Date1V : NV Address: 888
    uint32_t chan3Date1V;
    // Parameter: CalibOCR10V : chan3OCR10V : NV Address: 892
    float chan3OCR10V;
    // Parameter: CalibFCR10V : chan3FSR10V : NV Address: 896
    float chan3FSR10V;
    // Parameter: CalibFDate10V : chan3Date10V : NV Address: 900
    uint32_t chan3Date10V;
    // Parameter: CalibOCR30V : chan3OCR30V : NV Address: 904
    float chan3OCR30V;
    // Parameter: CalibFCR30V : chan3FSR30V : NV Address: 908
    float chan3FSR30V;
    // Parameter: CalibFDate30V : chan3Date30V : NV Address: 912
    uint32_t chan3Date30V;
    // Parameter: CalibOCR20mA : chan3OCR20mA : NV Address: 916
    float chan3OCR20mA;
    // Parameter: CalibFCR20mA : chan3FSR20mA : NV Address: 920
    float chan3FSR20mA;
    // Parameter: CalibFDate20mA : chan3Date20mA : NV Address: 924
    uint32_t chan3Date20mA;
    // Parameter: CalibOCR4x : chan3OCR4x : NV Address: 928
    float chan3OCR4x;
    // Parameter: CalibFSR4x : chan3FSR4x : NV Address: 932
    float chan3FSR4x;
    // Parameter: CalibDate4x : chan3Date4x : NV Address: 936
    uint32_t chan3Date4x;
    // Parameter: CalibOCR3x : chan3OCR3x : NV Address: 940
    float chan3OCR3x;
    // Parameter: CalibFSR3x : chan3FSR3x : NV Address: 944
    float chan3FSR3x;
    // Parameter: CalibDate3x : chan3Date3x : NV Address: 948
    uint32_t chan3Date3x;
    // Parameter: CalibOCRinternal : chan3OCRinternal : NV Address: 952
    float chan3OCRinternal;
    // Parameter: CalibFSRinternal : chan3FSRinternal : NV Address: 956
    float chan3FSRinternal;
    // Parameter: CalibDateinternal : chan3DateRinternal : NV Address: 960
    uint32_t chan3DateRinternal;
    // Parameter: Digital Data : chan0DIData : NV Address: 964
    float chan0DIData;
    // Parameter: Number of pulses : chan0DIPulse : NV Address: 964
    uint32_t chan0DIPulse;
    // Parameter: Time pulses : chan0DITime : NV Address: 964
    uint32_t chan0DITime;
    // Parameter: Signal Type(DI) : chan0DISignalType : NV Address: 968
    uint16_t chan0DISignalType;
} tDeviceBasicParams;

//const uint16_t g_numLookupRegisters = (sizeof(g_stLookupRegisters)/sizeof(g_stLookupRegisters[0]));
