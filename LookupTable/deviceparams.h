/************************************************************************************
 * Filename: deviceparams6DI6RO.h
 *
 * Notice:
 *           THIS FILE AUTOMATICALLY GENERATED BY SPREADSHEET
 *                   ModbusMap.xlsm. 
 *           MANUAL UPDATES TO THIS FILE WILL BE LOST.
 *
 *
***************************************************************************************
 *
 *
 *=====================================================================================
 * Description:
 *   Header file for the Modbus registers and coil lookup tables. These tables map
 *   the registers/coils from Modbus to the appropriate location (I/O Processor or
 *   Sensor Processor). It also defines attributes such as type and protection.
 *
 * External Interface Functions:
 *   N/A
 *
 * Internal Functions:
 *   N/A
 * 
***************************************************************************************/
//
#ifndef _DEVICE_PARAMS
#define _DEVICE_PARAMS
#include <stdint.h> 
#define GET_PARAMETER_ADDRESS(parInfo) ( (uint8_t*)((uint8_t*)&g_deviceDataStorage + parInfo->paramOffset)  )
  
typedef enum 
{
    EAT_USER =  0x00,         //пользовательский доступ, по умолчанию
    EAT_SERVICE = 0x01, // сервисный уровеень
    EAT_ROOT = 0x0003, // ROOT – полный доступ ко всем
} eAccessType;
  
typedef enum 
{
  EDE_NO_ERROR = 0x00, //нет ошибок
  EDE_SERIAL_ERROR = (1<<0), // ошибка серийного номера
  EDE_FACTORY_DATE_ERROR = (1<<1), // ошибка даты производства
  EDE_CRC32_ERROR = (1<<2), // ошибка даты производства
  EDE_FRAM_ERROR = (1<<3), // ошибка памяти
  EDE_FRAM_LRC = (1<<4) , //ошибка контрольной суммы памяти
} eDeviceError;
  
typedef enum 
{
  ECDF_OFF  = 0x00, // канал отключен
  ECDF_OK_DATA = 0x01, //измерение
  ECDF_BREAK = 0x02, //обрыв линии
  ECDF_OVERLOAD_MIN = 0x03, //значение ниже нижнего предела
  ECDF_OVERLOAD_MAX = 0x04, //значение выше верхнего предела
  ECDF_ERROR = 0x05, //ошибка канала,измерение невозможно
} eChanDataFlag;
  
typedef enum 
{
  ECS_OFF  = 0x00, // канал отключен
  ECS_ON = 0x01, //канал включён
  ECS_CONFIG = 0x02, //неверная конфигурация
  ECS_ERROR = 0x03, //ошибка канала
} eChanStatus;
  
typedef enum 
{
  ECE_NO_ERROR  = 0x00, // нет ошибок
  ECE_COMM = (1<<0), // ошибка связи с АЦП
  ECE_CJ = (1<<1), //ошибка холодного спая
  ECE_CALIB = (1<<2), // повреждена калибровка
} eChanError;
  
typedef enum 
{
  ESM_WORK = 0x0, //штатный режим
  ESM_CHECK = 0x1, //режим проверки
}
eSteelMode;
  
typedef enum 
{
  ESCS_OFF  = 0x00, // канал отключен
  ESCS_ON = 0x01, //ожидние условия начала замера
  ESCS_MEASURE= 0x02, //идёт замер
  ESCS_ERROR_TC = 0x03, //ошибка термопары
  ESCS_ERROR_EMF = 0x04, //ошибка датчика окисленности
  ESCS_NOFIND_TEMP = 0x05, //не найдена площадка по температуре
  ESCS_NOFIND_EMF = 0x06, //не найдена площадка по окисленности
  ESCS_NOFIND = 0x07, //не найдены площадки
  ESCS_FIND = 0x08, // найдены площадки
  ESCS_BREAK = 0x09, // обрыв термопары
  ESCS_CN_ERR = 0x0A, // ошибка канала
} eSteelChansStatus;
  
typedef enum 
{
  ESCE_NO_ERROR  = 0x00, // нет ошибок
  ESCE_COMM1 = (1<<0), // ошибка связи с АЦП1(термопара)
  ESCE_CJ = (1<<1), //ошибка холодного спая
  ESCE_COMM2 = (1<<2), // ошибка связи с АЦП2(окисленность)
  ESCE_CALIB1 = (1<<3), // повреждена калибровка АПЦ1(термопара)
  ESCE_CALIB2 = (1<<4), // повреждена калибровка АПЦ2(термопара)
} eSteelChanError;
#pragma pack(push, 1)
// Register Structure Definition
typedef struct
{
    // Parameter: Data channel 0 : DataChan0 : NV Address: 0
    float DataChan0;
    // Parameter: Data channel 1 : DataChan1 : NV Address: 0
    float DataChan1;
    // Parameter: Data channel 2 : DataChan2 : NV Address: 0
    float DataChan2;
    // Parameter: Data channel 3 : DataChan3 : NV Address: 0
    float DataChan3;
    // Parameter: Data channel 4 : DataChan4 : NV Address: 0
    float DataChan4;
    // Parameter: Data channel 5 : DataChan5 : NV Address: 0
    float DataChan5;
    // Parameter: Data channel 6 : DataChan6 : NV Address: 0
    float DataChan6;
    // Parameter: Data channel 7 : DataChan7 : NV Address: 0
    float DataChan7;
    // Parameter: Protocol version  : protocolVersion : NV Address: 0
    uint32_t protocolVersion;
    // Parameter: Hardware version  : hardwareVersion : NV Address: 4
    uint32_t hardwareVersion;
    // Parameter: Software Version : softwareVersion : NV Address: 8
    uint32_t softwareVersion;
    // Parameter: Serial number  : serialNumber : NV Address: 12
    uint32_t serialNumber;
    // Parameter: Device Type : deviceType : NV Address: 16
    uint16_t deviceType;
    // Parameter: Factory date  : factoryDate : NV Address: 18
    uint32_t factoryDate;
    // Parameter: Software CRC32  : softwareCrc32 : NV Address: 22
    uint32_t softwareCrc32;
    // Parameter: Unique ID  : uniqueId : NV Address: 26
    uint8_t uniqueId[12];
    // Parameter: Mode  : deviceMode : NV Address: 532
    uint16_t deviceMode;
    // Parameter: Modbus Baudrate : modbusBaud : NV Address: 26
    uint16_t modbusBaud;
    // Parameter: Modbus parity  : modbusParity : NV Address: 28
    uint16_t modbusParity;
    // Parameter: Modbus stopbit  : mbStopBits : NV Address: 30
    uint16_t mbStopBits;
    // Parameter: Data order : dataOrder : NV Address: 32
    uint16_t dataOrder;
    // Parameter: Modbus comm count  : mbCommCount : NV Address: 34
    uint32_t mbCommCount;
    // Parameter: Modbus comm error  : mbCommError : NV Address: 34
    uint32_t mbCommError;
    // Parameter: Access type  : accessType : NV Address: 34
    uint16_t accessType;
    // Parameter: Errors : devErrors : NV Address: 34
    uint16_t devErrors;
    // Parameter: Up time  : uptime : NV Address: 34
    uint32_t uptime;
    //
    uint16_t configDeviceType;
    //
    uint16_t hashRoot;
    // для прошивки нужно сюда записать значение из softwareVersion
    uint32_t updateSoftware;
    // Parameter: Data (Measure/Generate)  : chan0Data : NV Address: 1000
    float chan0Data;
    // Parameter: Raw Data : chan0RawData : NV Address: 1000
    uint32_t chan0RawData;
    // Parameter: Result CJ Value : chan0ResultCjValue : NV Address: 1000
    float chan0ResultCjValue;
    // Parameter: Data flags : chan0DataFlags : NV Address: 1000
    uint16_t chan0DataFlags;
    // Parameter: Status : chan0Status : NV Address: 1000
    uint16_t chan0Status;
    // Parameter: Error channel : chan0Error : NV Address: 1000
    uint16_t chan0Error;
    // Parameter: Uptime  : chan0Uptime : NV Address: 1000
    uint32_t chan0Uptime;
    // Parameter: Signal Type : chan0SignalType : NV Address: 1000
    uint16_t chan0SignalType;
    // Parameter: Additional parameter1 : chan0AdditionalParameter1 : NV Address: 1000
    uint8_t chan0AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan0AdditionalParameter2 : NV Address: 1000
    uint8_t chan0AdditionalParameter2[12];
    // Parameter: Transfer signal low limit  : chan0TransferSignalLowLim : NV Address: 1000
    float chan0TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan0TransferSignalHighLim : NV Address: 1000
    float chan0TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan0TransferScaleLowLim : NV Address: 1000
    float chan0TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan0TransferScaleHighLim : NV Address: 1000
    float chan0TransferScaleHighLim;
    // Parameter: Correction CJ Value : chan0CorrectionCjValue : NV Address: 1000
    float chan0CorrectionCjValue;
    // Parameter: Data (Measure/Generate)  : chan1Data : NV Address: 1000
    float chan1Data;
    // Parameter: Raw Data : chan1RawData : NV Address: 1000
    uint32_t chan1RawData;
    // Parameter: Result CJ Value : chan1ResultCjValue : NV Address: 1000
    float chan1ResultCjValue;
    // Parameter: Data flags : chan1DataFlags : NV Address: 1000
    uint16_t chan1DataFlags;
    // Parameter: Status : chan1Status : NV Address: 1000
    uint16_t chan1Status;
    // Parameter: Error channel : chan1Error : NV Address: 1000
    uint16_t chan1Error;
    // Parameter: Uptime  : chan1Uptime : NV Address: 1000
    uint32_t chan1Uptime;
    // Parameter: Signal Type : chan1SignalType : NV Address: 1000
    uint16_t chan1SignalType;
    // Parameter: Additional parameter1 : chan1AdditionalParameter1 : NV Address: 1000
    uint8_t chan1AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan1AdditionalParameter2 : NV Address: 1000
    uint8_t chan1AdditionalParameter2[12];
    // Parameter: Transfer signal low limit  : chan1TransferSignalLowLim : NV Address: 1000
    float chan1TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan1TransferSignalHighLim : NV Address: 1000
    float chan1TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan1TransferScaleLowLim : NV Address: 1000
    float chan1TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan1TransferScaleHighLim : NV Address: 1000
    float chan1TransferScaleHighLim;
    // Parameter: Correctrion CJ Value : chan1CorrectionCjValue : NV Address: 1000
    float chan1CorrectionCjValue;
    // Parameter: Data (Measure/Generate)  : chan2Data : NV Address: 1000
    float chan2Data;
    // Parameter: Raw Data : chan2RawData : NV Address: 1000
    uint32_t chan2RawData;
    // Parameter: Result CJ Value : chan2ResultCjValue : NV Address: 1000
    float chan2ResultCjValue;
    // Parameter: Data flags : chan2DataFlags : NV Address: 1000
    uint16_t chan2DataFlags;
    // Parameter: Status : chan2Status : NV Address: 1000
    uint16_t chan2Status;
    // Parameter: Error channel : chan2Error : NV Address: 1000
    uint16_t chan2Error;
    // Parameter: Uptime  : chan2Uptime : NV Address: 1000
    uint32_t chan2Uptime;
    // Parameter: Signal Type : chan2SignalType : NV Address: 1000
    uint16_t chan2SignalType;
    // Parameter: Additional parameter1 : chan2AdditionalParameter1 : NV Address: 1000
    uint8_t chan2AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan2AdditionalParameter2 : NV Address: 1000
    uint8_t chan2AdditionalParameter2[12];
    // Parameter: Transfer signal low limit  : chan2TransferSignalLowLim : NV Address: 1000
    float chan2TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan2TransferSignalHighLim : NV Address: 1000
    float chan2TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan2TransferScaleLowLim : NV Address: 1000
    float chan2TransferScaleLowLim;
    // Parameter: Transfer scale high limit  : chan2TransferScaleHighLim : NV Address: 1000
    float chan2TransferScaleHighLim;
    // Parameter: Correctrion CJ Value : chan2CorrectionCjValue : NV Address: 1000
    float chan2CorrectionCjValue;
    // Parameter: Data (Measure/Generate)  : chan3Data : NV Address: 1000
    float chan3Data;
    // Parameter: Raw Data : chan3RawData : NV Address: 1000
    uint32_t chan3RawData;
    // Parameter: Result CJ Value : chan3ResultCjValue : NV Address: 1000
    float chan3ResultCjValue;
    // Parameter: Data flags : chan3DataFlags : NV Address: 1000
    uint16_t chan3DataFlags;
    // Parameter: Status : chan3Status : NV Address: 1000
    uint16_t chan3Status;
    // Parameter: Error channel : chan3Error : NV Address: 1000
    uint16_t chan3Error;
    // Parameter: Uptime  : chan3Uptime : NV Address: 1000
    uint32_t chan3Uptime;
    // Parameter: Signal Type : chan3SignalType : NV Address: 1000
    uint16_t chan3SignalType;
    // Parameter: Additional parameter1 : chan3AdditionalParameter1 : NV Address: 1000
    uint8_t chan3AdditionalParameter1[12];
    // Parameter: Additional parameter2 : chan3AdditionalParameter2 : NV Address: 1000
    uint8_t chan3AdditionalParameter2[12];
    // Parameter: Transfer signal low limit  : chan3TransferSignalLowLim : NV Address: 1000
    float chan3TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan3TransferSignalHighLim : NV Address: 1000
    float chan3TransferSignalHighLim;
    // Parameter: Transfer scale low limit  : chan3TransferScaleLowLim : NV Address: 1000
    float chan3TransferScaleLowLim;
    // Parameter: Transfer scale High limit  : chan3TransferScaleHighLim : NV Address: 1000
    float chan3TransferScaleHighLim;
    // Parameter: Correctrion CJ Value : chan3CorrectionCjValue : NV Address: 1000
    float chan3CorrectionCjValue;
    // Parameter: Temperature square : chan0TempSquare : NV Address: 1000
    float chan0TempSquare;
    // Parameter: Senson activity oxygen : chan0PrimaryActivity : NV Address: 1000
    float chan0PrimaryActivity;
    // Parameter: Result CJ Value : chan0SteelResultCjValue : NV Address: 1000
    float chan0SteelResultCjValue;
    // Parameter: Oxygen_activity : chan0OxActivity : NV Address: 1000
    float chan0OxActivity;
    // Parameter: Mass_Aluminium : chan0MassAl : NV Address: 1000
    float chan0MassAl;
    // Parameter: Сarbon_сontent : chan0Carbon : NV Address: 1000
    float chan0Carbon;
    // Parameter: Status : chan0SteelStatus : NV Address: 1000
    uint16_t chan0SteelStatus;
    // Parameter: Channel Error : chan0SteelError : NV Address: 1000
    uint16_t chan0SteelError;
    // Parameter: Additional parameter1 : chan0SteelAdditionalParameter1 : NV Address: 500
    uint8_t chan0SteelAdditionalParameter1[12];
    // Parameter: Verification read Master : chan0VerificationRead : NV Address: 500
    float chan0VerificationRead;
    // Parameter: Correctrion CJ Value : chan0SteelCorrectionjValue : NV Address: 500
    float chan0SteelCorrectionjValue;
    // Parameter: Time_measure : chan0TimeMeasure : NV Address: 1000
    float chan0TimeMeasure;
    // Parameter: Range_temperature : chan0RangeTemp : NV Address: 1000
    float chan0RangeTemp;
    // Parameter: Time_square_temperature : chan0TimeSquareTemp : NV Address: 1000
    float chan0TimeSquareTemp;
    // Parameter: Low_lim_temp : chan0LowTemp : NV Address: 1000
    float chan0LowTemp;
    // Parameter: Hi_lim_temp : chan0HiTemp : NV Address: 1000
    float chan0HiTemp;
    // Parameter: Sensor_Type_Activty : chan0SensorType : NV Address: 1000
    float chan0SensorType;
    // Parameter: Time_square_EDS : chan0TimeSquareEDS : NV Address: 1000
    float chan0TimeSquareEDS;
    // Parameter: Range_EDS : chan0RangeEDS : NV Address: 1000
    float chan0RangeEDS;
    // Parameter: Сrystallization_temperature : chan0Crystallization : NV Address: 1000
    float chan0Crystallization;
    // Parameter: Mass_coefficient : chan0MassCoeff : NV Address: 1000
    float chan0MassCoeff;
    // Parameter: Final_oxidation : chan0FinalOx : NV Address: 1000
    float chan0FinalOx;
    // Parameter: Assimilation of aluminum : chan0Assimilation : NV Address: 1000
    float chan0Assimilation;
    // Parameter: Mass_melting : chan0MassMelting : NV Address: 1000
    float chan0MassMelting;
    // Parameter: TEMP array0 : chan0TEMParray0 : NV Address: 1000
    int16_t chan0TEMParray0[64];
    // Parameter: TEMP array1 : chan0TEMParray1 : NV Address: 1000
    int16_t chan0TEMParray1[64];
    // Parameter: TEMP array2 : chan0TEMParray2 : NV Address: 1000
    int16_t chan0TEMParray2[64];
    // Parameter: TEMP array3 : chan0TEMParray3 : NV Address: 1000
    int16_t chan0TEMParray3[64];
    // Parameter: TEMP array4 : chan0TEMParray4 : NV Address: 1000
    int16_t chan0TEMParray4[64];
    // Parameter: EMF array0 : chan0EMFarray0 : NV Address: 1000
    int16_t chan0EMFarray0[64];
    // Parameter: EMF array1 : chan0EMFarray1 : NV Address: 1000
    int16_t chan0EMFarray1[64];
    // Parameter: EMF array2 : chan0EMFarray2 : NV Address: 1000
    int16_t chan0EMFarray2[64];
    // Parameter: EMF array3 : chan0EMFarray3 : NV Address: 1000
    int16_t chan0EMFarray3[64];
    // Parameter: EMF array4 : chan0EMFarray4 : NV Address: 1000
    int16_t chan0EMFarray4[64];
    // Parameter: Temperature square : chan1TempSquare : NV Address: 1000
    float chan1TempSquare;
    // Parameter: Senson activity oxygen : chan1PrimaryActivity : NV Address: 1000
    float chan1PrimaryActivity;
    // Parameter: Result CJ Value : chan1SteelResultCjValue : NV Address: 1000
    float chan1SteelResultCjValue;
    // Parameter: Oxygen_activity : chan1OxActivity : NV Address: 1000
    float chan1OxActivity;
    // Parameter: Mass_Aluminium : chan1MassAl : NV Address: 1000
    float chan1MassAl;
    // Parameter: Сarbon_сontent : chan1Carbon : NV Address: 1000
    float chan1Carbon;
    // Parameter: Status : chan1SteelStatus : NV Address: 1000
    uint16_t chan1SteelStatus;
    // Parameter: Channel Error : chan1SteelError : NV Address: 1000
    uint16_t chan1SteelError;
    // Parameter: Additional parameter1 : chan1SteelAdditionalParameter1 : NV Address: 1000
    uint8_t chan1SteelAdditionalParameter1[12];
    // Parameter: Verification read Master : chan1VerificationRead : NV Address: 1000
    float chan1VerificationRead;
    // Parameter: Correctrion CJ Value : chan1SteelCorrectionjValue : NV Address: 1000
    float chan1SteelCorrectionjValue;
    // Parameter: Time_measure : chan1TimeMeasure : NV Address: 1000
    float chan1TimeMeasure;
    // Parameter: Range_temperature : chan1RangeTemp : NV Address: 1000
    float chan1RangeTemp;
    // Parameter: Time_square_temperature : chan1TimeSquareTemp : NV Address: 1000
    float chan1TimeSquareTemp;
    // Parameter: Low_lim_temp : chan1LowTemp : NV Address: 1000
    float chan1LowTemp;
    // Parameter: Hi_lim_temp : chan1HiTemp : NV Address: 1000
    float chan1HiTemp;
    // Parameter: Sensor_Type_Activty : chan1SensorType : NV Address: 1000
    float chan1SensorType;
    // Parameter: Time_square_EDS : chan1TimeSquareEDS : NV Address: 1000
    float chan1TimeSquareEDS;
    // Parameter: Range_EDS : chan1RangeEDS : NV Address: 1000
    float chan1RangeEDS;
    // Parameter: Сrystallization_temperature : chan1Crystallization : NV Address: 1000
    float chan1Crystallization;
    // Parameter: Mass_coefficient : chan1MassCoeff : NV Address: 1000
    float chan1MassCoeff;
    // Parameter: Final_oxidation : chan1FinalOx : NV Address: 1000
    float chan1FinalOx;
    // Parameter: Assimilation of aluminum : chan1Assimilation : NV Address: 1000
    float chan1Assimilation;
    // Parameter: Mass_melting : chan1MassMelting : NV Address: 1000
    float chan1MassMelting;
    // Parameter: TEMP array0 : chan1TEMParray0 : NV Address: 1000
    int16_t chan1TEMParray0[64];
    // Parameter: TEMP array1 : chan1TEMParray1 : NV Address: 1000
    int16_t chan1TEMParray1[64];
    // Parameter: TEMP array2 : chan1TEMParray2 : NV Address: 1000
    int16_t chan1TEMParray2[64];
    // Parameter: TEMP array3 : chan1TEMParray3 : NV Address: 1000
    int16_t chan1TEMParray3[64];
    // Parameter: TEMP array4 : chan1TEMParray4 : NV Address: 1000
    int16_t chan1TEMParray4[64];
    // Parameter: EMF array0 : chan1EMFarray0 : NV Address: 1000
    int16_t chan1EMFarray0[64];
    // Parameter: EMF array1 : chan1EMFarray1 : NV Address: 1000
    int16_t chan1EMFarray1[64];
    // Parameter: EMF array2 : chan1EMFarray2 : NV Address: 1000
    int16_t chan1EMFarray2[64];
    // Parameter: EMF array3 : chan1EMFarray3 : NV Address: 1000
    int16_t chan1EMFarray3[64];
    // Parameter: EMF array4 : chan1EMFarray4 : NV Address: 1000
    int16_t chan1EMFarray4[64];
    // Parameter: Temperature square : chan2TempSquare : NV Address: 1000
    float chan2TempSquare;
    // Parameter: Senson activity oxygen : chan2PrimaryActivity : NV Address: 1000
    float chan2PrimaryActivity;
    // Parameter: Result CJ Value : chan2SteelResultCjValue : NV Address: 1000
    float chan2SteelResultCjValue;
    // Parameter: Oxygen_activity : chan2OxActivity : NV Address: 1000
    float chan2OxActivity;
    // Parameter: Mass_Aluminium : chan2MassAl : NV Address: 1000
    float chan2MassAl;
    // Parameter: Сarbon_сontent : chan2Carbon : NV Address: 1000
    float chan2Carbon;
    // Parameter: Status : chan2SteelStatus : NV Address: 1000
    uint16_t chan2SteelStatus;
    // Parameter: Channel Error : chan2SteelError : NV Address: 1000
    uint16_t chan2SteelError;
    // Parameter: Additional parameter1 : chan2SteelAdditionalParameter1 : NV Address: 500
    uint8_t chan2SteelAdditionalParameter1[12];
    // Parameter: Verification read Master : chan2VerificationRead : NV Address: 500
    float chan2VerificationRead;
    // Parameter: Correctrion CJ Value : chan2SteelCorrectionjValue : NV Address: 500
    float chan2SteelCorrectionjValue;
    // Parameter: Time_measure : chan2TimeMeasure : NV Address: 1000
    float chan2TimeMeasure;
    // Parameter: Range_temperature : chan2RangeTemp : NV Address: 1000
    float chan2RangeTemp;
    // Parameter: Time_square_temperature : chan2TimeSquareTemp : NV Address: 1000
    float chan2TimeSquareTemp;
    // Parameter: Low_lim_temp : chan2LowTemp : NV Address: 1000
    float chan2LowTemp;
    // Parameter: Hi_lim_temp : chan2HiTemp : NV Address: 1000
    float chan2HiTemp;
    // Parameter: Sensor_Type_Activty : chan2SensorType : NV Address: 1000
    float chan2SensorType;
    // Parameter: Time_square_EDS : chan2TimeSquareEDS : NV Address: 1000
    float chan2TimeSquareEDS;
    // Parameter: Range_EDS : chan2RangeEDS : NV Address: 1000
    float chan2RangeEDS;
    // Parameter: Сrystallization_temperature : chan2Crystallization : NV Address: 1000
    float chan2Crystallization;
    // Parameter: Mass_coefficient : chan2MassCoeff : NV Address: 1000
    float chan2MassCoeff;
    // Parameter: Final_oxidation : chan2FinalOx : NV Address: 1000
    float chan2FinalOx;
    // Parameter: Assimilation of aluminum : chan2Assimilation : NV Address: 1000
    float chan2Assimilation;
    // Parameter: Mass_melting : chan2MassMelting : NV Address: 1000
    float chan2MassMelting;
    // Parameter: TEMP array0 : chan2TEMParray0 : NV Address: 1000
    int16_t chan2TEMParray0[64];
    // Parameter: TEMP array1 : chan2TEMParray1 : NV Address: 1000
    int16_t chan2TEMParray1[64];
    // Parameter: TEMP array2 : chan2TEMParray2 : NV Address: 1000
    int16_t chan2TEMParray2[64];
    // Parameter: TEMP array3 : chan2TEMParray3 : NV Address: 1000
    int16_t chan2TEMParray3[64];
    // Parameter: TEMP array4 : chan2TEMParray4 : NV Address: 1000
    int16_t chan2TEMParray4[64];
    // Parameter: EMF array0 : chan2EMFarray0 : NV Address: 1000
    int16_t chan2EMFarray0[64];
    // Parameter: EMF array1 : chan2EMFarray1 : NV Address: 1000
    int16_t chan2EMFarray1[64];
    // Parameter: EMF array2 : chan2EMFarray2 : NV Address: 1000
    int16_t chan2EMFarray2[64];
    // Parameter: EMF array3 : chan2EMFarray3 : NV Address: 1000
    int16_t chan2EMFarray3[64];
    // Parameter: EMF array4 : chan2EMFarray4 : NV Address: 1000
    int16_t chan2EMFarray4[64];
    // Parameter: Temperature square : chan3TempSquare : NV Address: 1000
    float chan3TempSquare;
    // Parameter: Senson activity oxygen : chan3PrimaryActivity : NV Address: 1000
    float chan3PrimaryActivity;
    // Parameter: Result CJ Value : chan3SteelResultCjValue : NV Address: 1000
    float chan3SteelResultCjValue;
    // Parameter: Oxygen_activity : chan3OxActivity : NV Address: 1000
    float chan3OxActivity;
    // Parameter: Mass_Aluminium : chan3MassAl : NV Address: 1000
    float chan3MassAl;
    // Parameter: Сarbon_сontent : chan3Carbon : NV Address: 1000
    float chan3Carbon;
    // Parameter: Status : chan3SteelStatus : NV Address: 1000
    uint16_t chan3SteelStatus;
    // Parameter: Channel Error : chan3SteelError : NV Address: 1000
    uint16_t chan3SteelError;
    // Parameter: Additional parameter1 : chan3SteelAdditionalParameter1 : NV Address: 500
    uint8_t chan3SteelAdditionalParameter1[12];
    // Parameter: Verification read Master : chan3VerificationRead : NV Address: 500
    float chan3VerificationRead;
    // Parameter: Correctrion CJ Value : chan3SteelCorrectionjValue : NV Address: 500
    float chan3SteelCorrectionjValue;
    // Parameter: Time_measure : chan3TimeMeasure : NV Address: 1000
    float chan3TimeMeasure;
    // Parameter: Range_temperature : chan3RangeTemp : NV Address: 1000
    float chan3RangeTemp;
    // Parameter: Time_square_temperature : chan3TimeSquareTemp : NV Address: 1000
    float chan3TimeSquareTemp;
    // Parameter: Low_lim_temp : chan3LowTemp : NV Address: 1000
    float chan3LowTemp;
    // Parameter: Hi_lim_temp : chan3HiTemp : NV Address: 1000
    float chan3HiTemp;
    // Parameter: Sensor_Type_Activty : chan3SensorType : NV Address: 1000
    float chan3SensorType;
    // Parameter: Time_square_EDS : chan3TimeSquareEDS : NV Address: 1000
    float chan3TimeSquareEDS;
    // Parameter: Range_EDS : chan3RangeEDS : NV Address: 1000
    float chan3RangeEDS;
    // Parameter: Сrystallization_temperature : chan3Crystallization : NV Address: 1000
    float chan3Crystallization;
    // Parameter: Mass_coefficient : chan3MassCoeff : NV Address: 1000
    float chan3MassCoeff;
    // Parameter: Final_oxidation : chan3FinalOx : NV Address: 1000
    float chan3FinalOx;
    // Parameter: Assimilation of aluminum : chan3Assimilation : NV Address: 1000
    float chan3Assimilation;
    // Parameter: Mass_melting : chan3MassMelting : NV Address: 1000
    float chan3MassMelting;
    // Parameter: TEMP array0 : chan3TEMParray0 : NV Address: 1000
    int16_t chan3TEMParray0[64];
    // Parameter: TEMP array1 : chan3TEMParray1 : NV Address: 1000
    int16_t chan3TEMParray1[64];
    // Parameter: TEMP array2 : chan3TEMParray2 : NV Address: 1000
    int16_t chan3TEMParray2[64];
    // Parameter: TEMP array3 : chan3TEMParray3 : NV Address: 1000
    int16_t chan3TEMParray3[64];
    // Parameter: TEMP array4 : chan3TEMParray4 : NV Address: 1000
    int16_t chan3TEMParray4[64];
    // Parameter: EMF array0 : chan3EMFarray0 : NV Address: 1000
    int16_t chan3EMFarray0[64];
    // Parameter: EMF array1 : chan3EMFarray1 : NV Address: 1000
    int16_t chan3EMFarray1[64];
    // Parameter: EMF array2 : chan3EMFarray2 : NV Address: 1000
    int16_t chan3EMFarray2[64];
    // Parameter: EMF array3 : chan3EMFarray3 : NV Address: 1000
    int16_t chan3EMFarray3[64];
    // Parameter: EMF array4 : chan3EMFarray4 : NV Address: 1000
    int16_t chan3EMFarray4[64];
    // Parameter: Hi alarm_Reley : RelayControl : NV Address: 1000
    uint16_t RelayControl;
    // Parameter: Out freq chan : chan0MeasureFreq : NV Address: 1000
    float chan0MeasureFreq;
    // Parameter: Out  imp chan : chan0Impulse : NV Address: 1000
    float chan0Impulse;
    // Parameter: Buffer impulse : chan0ImpulseBuff : NV Address: 1004
    float chan0ImpulseBuff;
    // Parameter: SignalType(Digital) : chan0DigitSignalType : NV Address: 1004
    uint16_t chan0DigitSignalType;
    // Parameter: Additional parameter : chan0DigitalAdditionalParameter : NV Address: 1004
    uint8_t chan0DigitalAdditionalParameter[12];
    // Parameter: TimeDamping : chan0ImpulseDuration : NV Address: 1004
    float chan0ImpulseDuration;
    // Parameter: Out freq chan : chan1MeasureFreq : NV Address: 1004
    float chan1MeasureFreq;
    // Parameter: Out  imp chan : chan1Impulse : NV Address: 1004
    float chan1Impulse;
    // Parameter: Buffer impulse : chan1ImpulseBuff : NV Address: 1008
    float chan1ImpulseBuff;
    // Parameter: SignalType(Digital) : chan1DigitSignalType : NV Address: 1008
    uint16_t chan1DigitSignalType;
    // Parameter: Additional parameter : chan1DigitalAdditionalParameter : NV Address: 1008
    uint8_t chan1DigitalAdditionalParameter[12];
    // Parameter: TimeDamping : chan1ImpulseDuration : NV Address: 1008
    float chan1ImpulseDuration;
    // Parameter: Out freq chan : chan2MeasureFreq : NV Address: 1008
    float chan2MeasureFreq;
    // Parameter: Out  imp chan : chan2Impulse : NV Address: 1008
    float chan2Impulse;
    // Parameter: Buffer impulse : chan2ImpulseBuff : NV Address: 1012
    float chan2ImpulseBuff;
    // Parameter: SignalType(Digital) : chan2DigitSignalType : NV Address: 1012
    uint16_t chan2DigitSignalType;
    // Parameter: Additional parameter : chan2DigitalAdditionalParameter : NV Address: 1012
    uint8_t chan2DigitalAdditionalParameter[12];
    // Parameter: TimeDamping : chan2ImpulseDuration : NV Address: 1012
    float chan2ImpulseDuration;
    // Parameter: Out freq chan : chan3MeasureFreq : NV Address: 1012
    float chan3MeasureFreq;
    // Parameter: Out  imp chan : chan3Impulse : NV Address: 1012
    float chan3Impulse;
    // Parameter: Buffer impulse : chan3ImpulseBuff : NV Address: 1016
    float chan3ImpulseBuff;
    // Parameter: SignalType(Digital) : chan3DigitSignalType : NV Address: 1016
    uint16_t chan3DigitSignalType;
    // Parameter: Additional parameter : chan3DigitalAdditionalParameter : NV Address: 1016
    uint8_t chan3DigitalAdditionalParameter[12];
    // Parameter: TimeDamping : chan3ImpulseDuration : NV Address: 1016
    float chan3ImpulseDuration;
    // Parameter: Out freq chan : chan4MeasureFreq : NV Address: 1016
    float chan4MeasureFreq;
    // Parameter: Out  imp chan : chan4Impulse : NV Address: 1016
    float chan4Impulse;
    // Parameter: Buffer impulse : chan4ImpulseBuff : NV Address: 1020
    float chan4ImpulseBuff;
    // Parameter: SignalType(Digital) : chan4DigitSignalType : NV Address: 1020
    uint16_t chan4DigitSignalType;
    // Parameter: Additional parameter : chan4DigitalAdditionalParameter : NV Address: 1020
    uint8_t chan4DigitalAdditionalParameter[12];
    // Parameter: TimeDamping : chan4ImpulseDuration : NV Address: 1020
    float chan4ImpulseDuration;
    // Parameter: Out freq chan : chan5MeasureFreq : NV Address: 1020
    float chan5MeasureFreq;
    // Parameter: Out  imp chan : chan5Impulse : NV Address: 1020
    float chan5Impulse;
    // Parameter: Buffer impulse : chan5ImpulseBuff : NV Address: 1024
    float chan5ImpulseBuff;
    // Parameter: SignalType(Digital) : chan5DigitSignalType : NV Address: 1024
    uint16_t chan5DigitSignalType;
    // Parameter: Additional parameter : chan5DigitalAdditionalParameter : NV Address: 1024
    uint8_t chan5DigitalAdditionalParameter[12];
    // Parameter: TimeDamping : chan5ImpulseDuration : NV Address: 1024
    float chan5ImpulseDuration;
    // Parameter: SysOCalb : chan0SysOCR : NV Address: 100
    uint16_t chan0SysOCR;
    // Parameter: SysGCalb : chan0SysFSR : NV Address: 100
    uint16_t chan0SysFSR;
    // Parameter: CalibOCR20mV : chan0OCR20mV : NV Address: 100
    uint32_t chan0OCR20mV;
    // Parameter: CalibFCR20mV : chan0FSR20mV : NV Address: 104
    uint32_t chan0FSR20mV;
    // Parameter: CalibFDate20mV : chan0Date20mV : NV Address: 108
    uint32_t chan0Date20mV;
    // Parameter: CalibOCR100mV : chan0OCR100mV : NV Address: 112
    uint32_t chan0OCR100mV;
    // Parameter: CalibFCR100mV : chan0FSR100mV : NV Address: 116
    uint32_t chan0FSR100mV;
    // Parameter: CalibFDate100mV : chan0Date100mV : NV Address: 120
    uint32_t chan0Date100mV;
    // Parameter: CalibOCR1V : chan0OCR1V : NV Address: 124
    uint32_t chan0OCR1V;
    // Parameter: CalibFCR1V : chan0FSR1V : NV Address: 128
    uint32_t chan0FSR1V;
    // Parameter: CalibFDate1V : chan0Date1V : NV Address: 132
    uint32_t chan0Date1V;
    // Parameter: CalibOCR10V : chan0OCR10V : NV Address: 136
    uint32_t chan0OCR10V;
    // Parameter: CalibFCR10V : chan0FSR10V : NV Address: 140
    uint32_t chan0FSR10V;
    // Parameter: CalibFDate10V : chan0Date10V : NV Address: 144
    uint32_t chan0Date10V;
    // Parameter: CalibOCR30V : chan0OCR30V : NV Address: 148
    uint32_t chan0OCR30V;
    // Parameter: CalibFCR30V : chan0FSR30V : NV Address: 152
    uint32_t chan0FSR30V;
    // Parameter: CalibFDate30V : chan0Date30V : NV Address: 156
    uint32_t chan0Date30V;
    // Parameter: CalibOCR20mA : chan0OCR20mA : NV Address: 160
    uint32_t chan0OCR20mA;
    // Parameter: CalibFCR20mA : chan0FSR20mA : NV Address: 164
    uint32_t chan0FSR20mA;
    // Parameter: CalibFDate20mA : chan0Date20mA : NV Address: 168
    uint32_t chan0Date20mA;
    // Parameter: CalibOCR4x : chan0OCR4x : NV Address: 172
    uint32_t chan0OCR4x;
    // Parameter: CalibFSR4x : chan0FSR4x : NV Address: 176
    uint32_t chan0FSR4x;
    // Parameter: CalibDate4x : chan0Date4x : NV Address: 180
    uint32_t chan0Date4x;
    // Parameter: CalibOCR3x : chan0OCR3x : NV Address: 184
    uint32_t chan0OCR3x;
    // Parameter: CalibFSR3x : chan0FSR3x : NV Address: 188
    uint32_t chan0FSR3x;
    // Parameter: CalibDate3x : chan0Date3x : NV Address: 192
    uint32_t chan0Date3x;
    // Parameter: CalibOCRinternal : chan0OCRinternal : NV Address: 196
    float chan0OCRinternal;
    // Parameter: CalibFSRinternal : chan0FSRinternal : NV Address: 200
    float chan0FSRinternal;
    // Parameter: CalibDateinternal : chan0DateInternal : NV Address: 204
    uint32_t chan0DateInternal;
    // Parameter: SysOCalb : chan1SysOCR : NV Address: 208
    uint16_t chan1SysOCR;
    // Parameter: SysGCalb : chan1SysFSR : NV Address: 208
    uint16_t chan1SysFSR;
    // Parameter: CalibOCR20mV : chan1OCR20mV : NV Address: 208
    uint32_t chan1OCR20mV;
    // Parameter: CalibFCR20mV : chan1FSR20mV : NV Address: 212
    uint32_t chan1FSR20mV;
    // Parameter: CalibFDate20mV : chan1Date20mV : NV Address: 216
    uint32_t chan1Date20mV;
    // Parameter: CalibOCR100mV : chan1OCR100mV : NV Address: 220
    uint32_t chan1OCR100mV;
    // Parameter: CalibFCR100mV : chan1FSR100mV : NV Address: 224
    uint32_t chan1FSR100mV;
    // Parameter: CalibFDate100mV : chan1Date100mV : NV Address: 228
    uint32_t chan1Date100mV;
    // Parameter: CalibOCR1V : chan1OCR1V : NV Address: 232
    uint32_t chan1OCR1V;
    // Parameter: CalibFCR1V : chan1FSR1V : NV Address: 236
    uint32_t chan1FSR1V;
    // Parameter: CalibFDate1V : chan1Date1V : NV Address: 240
    uint32_t chan1Date1V;
    // Parameter: CalibOCR10V : chan1OCR10V : NV Address: 244
    uint32_t chan1OCR10V;
    // Parameter: CalibFCR10V : chan1FSR10V : NV Address: 248
    uint32_t chan1FSR10V;
    // Parameter: CalibFDate10V : chan1Date10V : NV Address: 252
    uint32_t chan1Date10V;
    // Parameter: CalibOCR30V : chan1OCR30V : NV Address: 256
    uint32_t chan1OCR30V;
    // Parameter: CalibFCR30V : chan1FSR30V : NV Address: 260
    uint32_t chan1FSR30V;
    // Parameter: CalibFDate30V : chan1Date30V : NV Address: 264
    uint32_t chan1Date30V;
    // Parameter: CalibOCR20mA : chan1OCR20mA : NV Address: 268
    uint32_t chan1OCR20mA;
    // Parameter: CalibFCR20mA : chan1FSR20mA : NV Address: 272
    uint32_t chan1FSR20mA;
    // Parameter: CalibFDate20mA : chan1Date20mA : NV Address: 276
    uint32_t chan1Date20mA;
    // Parameter: CalibOCR4x : chan1OCR4x : NV Address: 280
    uint32_t chan1OCR4x;
    // Parameter: CalibFSR4x : chan1FSR4x : NV Address: 284
    uint32_t chan1FSR4x;
    // Parameter: CalibDate4x : chan1Date4x : NV Address: 288
    uint32_t chan1Date4x;
    // Parameter: CalibOCR3x : chan1OCR3x : NV Address: 292
    uint32_t chan1OCR3x;
    // Parameter: CalibFSR3x : chan1FSR3x : NV Address: 296
    uint32_t chan1FSR3x;
    // Parameter: CalibDate3x : chan1Date3x : NV Address: 300
    uint32_t chan1Date3x;
    // Parameter: CalibOCRinternal : chan1OCRinternal : NV Address: 304
    float chan1OCRinternal;
    // Parameter: CalibFSRinternal : chan1FSRinternal : NV Address: 308
    float chan1FSRinternal;
    // Parameter: CalibDateinternal : chan1DateInternal : NV Address: 312
    uint32_t chan1DateInternal;
    // Parameter: SysOCalb : chan2SysOCR : NV Address: 316
    uint16_t chan2SysOCR;
    // Parameter: SysGCalb : chan2SysFSR : NV Address: 316
    uint16_t chan2SysFSR;
    // Parameter: CalibOCR20mV : chan2OCR20mV : NV Address: 316
    uint32_t chan2OCR20mV;
    // Parameter: CalibFCR20mV : chan2FSR20mV : NV Address: 320
    uint32_t chan2FSR20mV;
    // Parameter: CalibFDate20mV : chan2Date20mV : NV Address: 324
    uint32_t chan2Date20mV;
    // Parameter: CalibOCR100mV : chan2OCR100mV : NV Address: 328
    uint32_t chan2OCR100mV;
    // Parameter: CalibFCR100mV : chan2FSR100mV : NV Address: 332
    uint32_t chan2FSR100mV;
    // Parameter: CalibFDate100mV : chan2Date100mV : NV Address: 336
    uint32_t chan2Date100mV;
    // Parameter: CalibOCR1V : chan2OCR1V : NV Address: 340
    uint32_t chan2OCR1V;
    // Parameter: CalibFCR1V : chan2FSR1V : NV Address: 344
    uint32_t chan2FSR1V;
    // Parameter: CalibFDate1V : chan2Date1V : NV Address: 348
    uint32_t chan2Date1V;
    // Parameter: CalibOCR10V : chan2OCR10V : NV Address: 352
    uint32_t chan2OCR10V;
    // Parameter: CalibFCR10V : chan2FSR10V : NV Address: 356
    uint32_t chan2FSR10V;
    // Parameter: CalibFDate10V : chan2Date10V : NV Address: 360
    uint32_t chan2Date10V;
    // Parameter: CalibOCR30V : chan2OCR30V : NV Address: 364
    uint32_t chan2OCR30V;
    // Parameter: CalibFCR30V : chan2FSR30V : NV Address: 368
    uint32_t chan2FSR30V;
    // Parameter: CalibFDate30V : chan2Date30V : NV Address: 372
    uint32_t chan2Date30V;
    // Parameter: CalibOCR20mA : chan2OCR20mA : NV Address: 376
    uint32_t chan2OCR20mA;
    // Parameter: CalibFCR20mA : chan2FSR20mA : NV Address: 380
    uint32_t chan2FSR20mA;
    // Parameter: CalibFDate20mA : chan2Date20mA : NV Address: 384
    uint32_t chan2Date20mA;
    // Parameter: CalibOCR4x : chan2OCR4x : NV Address: 388
    uint32_t chan2OCR4x;
    // Parameter: CalibFSR4x : chan2FSR4x : NV Address: 392
    uint32_t chan2FSR4x;
    // Parameter: CalibDate4x : chan2Date4x : NV Address: 396
    uint32_t chan2Date4x;
    // Parameter: CalibOCR3x : chan2OCR3x : NV Address: 400
    uint32_t chan2OCR3x;
    // Parameter: CalibFSR3x : chan2FSR3x : NV Address: 404
    uint32_t chan2FSR3x;
    // Parameter: CalibDate3x : chan2Date3x : NV Address: 408
    uint32_t chan2Date3x;
    // Parameter: CalibOCRinternal : chan2OCRinternal : NV Address: 412
    float chan2OCRinternal;
    // Parameter: CalibFSRinternal : chan2FSRinternal : NV Address: 416
    float chan2FSRinternal;
    // Parameter: CalibDateinternal : chan2DateInternal : NV Address: 420
    uint32_t chan2DateInternal;
    // Parameter: SysOCalb : chan3SysOCR : NV Address: 424
    uint16_t chan3SysOCR;
    // Parameter: SysGCalb : chan3SysFSR : NV Address: 424
    uint16_t chan3SysFSR;
    // Parameter: CalibOCR20mV : chan3OCR20mV : NV Address: 424
    uint32_t chan3OCR20mV;
    // Parameter: CalibFCR20mV : chan3FSR20mV : NV Address: 428
    uint32_t chan3FSR20mV;
    // Parameter: CalibFDate20mV : chan3Date20mV : NV Address: 432
    uint32_t chan3Date20mV;
    // Parameter: CalibOCR100mV : chan3OCR100mV : NV Address: 436
    uint32_t chan3OCR100mV;
    // Parameter: CalibFCR100mV : chan3FSR100mV : NV Address: 440
    uint32_t chan3FSR100mV;
    // Parameter: CalibFDate100mV : chan3Date100mV : NV Address: 444
    uint32_t chan3Date100mV;
    // Parameter: CalibOCR1V : chan3OCR1V : NV Address: 448
    uint32_t chan3OCR1V;
    // Parameter: CalibFCR1V : chan3FSR1V : NV Address: 452
    uint32_t chan3FSR1V;
    // Parameter: CalibFDate1V : chan3Date1V : NV Address: 456
    uint32_t chan3Date1V;
    // Parameter: CalibOCR10V : chan3OCR10V : NV Address: 460
    uint32_t chan3OCR10V;
    // Parameter: CalibFCR10V : chan3FSR10V : NV Address: 464
    uint32_t chan3FSR10V;
    // Parameter: CalibFDate10V : chan3Date10V : NV Address: 468
    uint32_t chan3Date10V;
    // Parameter: CalibOCR30V : chan3OCR30V : NV Address: 472
    uint32_t chan3OCR30V;
    // Parameter: CalibFCR30V : chan3FSR30V : NV Address: 476
    uint32_t chan3FSR30V;
    // Parameter: CalibFDate30V : chan3Date30V : NV Address: 480
    uint32_t chan3Date30V;
    // Parameter: CalibOCR20mA : chan3OCR20mA : NV Address: 484
    uint32_t chan3OCR20mA;
    // Parameter: CalibFCR20mA : chan3FSR20mA : NV Address: 488
    uint32_t chan3FSR20mA;
    // Parameter: CalibFDate20mA : chan3Date20mA : NV Address: 492
    uint32_t chan3Date20mA;
    // Parameter: CalibOCR4x : chan3OCR4x : NV Address: 496
    uint32_t chan3OCR4x;
    // Parameter: CalibFSR4x : chan3FSR4x : NV Address: 500
    uint32_t chan3FSR4x;
    // Parameter: CalibDate4x : chan3Date4x : NV Address: 504
    uint32_t chan3Date4x;
    // Parameter: CalibOCR3x : chan3OCR3x : NV Address: 508
    uint32_t chan3OCR3x;
    // Parameter: CalibFSR3x : chan3FSR3x : NV Address: 512
    uint32_t chan3FSR3x;
    // Parameter: CalibDate3x : chan3Date3x : NV Address: 516
    uint32_t chan3Date3x;
    // Parameter: CalibOCRinternal : chan3OCRinternal : NV Address: 520
    uint32_t chan3OCRinternal;
    // Parameter: CalibFSRinternal : chan3FSRinternal : NV Address: 524
    uint32_t chan3FSRinternal;
    // Parameter: CalibDateinternal : chan3DateInternal : NV Address: 528
    uint32_t chan3DateInternal;
} tDeviceBasicParams;
#pragma pack(pop)
#define PAR_HELPER(fmt, ...) printf(fmt " \ n%; s; ", __VA_ARGS__)
#define PAR(...) PAR_HELPER(__VA_ARGS__, ")
#define PAR_PREF(...) (*(&(g_deviceDataStorage.##__VA_ARGS__##)))
#define DEVICE_PAR(param) &(g_deviceDataStorage.##param)
#define DEVICE_PAR_VOID(param) ((void*)&(g_deviceDataStorage.##param))
#endif // !defined(_DEVICE_PARAMS)


