/************************************************************************************
 * Filename: deviceparams.h
 *
 * Notice:
 *           THIS FILE AUTOMATICALLY GENERATED BY SPREADSHEET
 *                   ModbusMap.xlsm.
 *           MANUAL UPDATES TO THIS FILE WILL BE LOST.
 *
 *
***************************************************************************************
 *
 *
 *=====================================================================================
 * Description:
 *   Header file for the Modbus registers and coil lookup tables. These tables map
 *   the registers/coils from Modbus to the appropriate location (I/O Processor or
 *   Sensor Processor). It also defines attributes such as type and protection.
 *
 * External Interface Functions:
 *   N/A
 *
 * Internal Functions:
 *   N/A
 *
***************************************************************************************/
//
#ifndef _DEVICE_PARAMS
#define _DEVICE_PARAMS
#include <stdint.h>
#define GET_PARAMETER_ADDRESS(parInfo) ( (uint8_t*)((uint8_t*)&g_deviceDataStorage + parInfo->paramOffset)  )

#define A12_ARR_SIZE 12

typedef struct
{
  uint16_t par1;
  uint16_t par2;
   uint16_t   par3;
  uint16_t par4;
  uint16_t par5;
  uint16_t par6;
} tAdditionalParData;

// chanDataFlags - channel data flags enum
typedef enum
{
  EDF_OK = 0x00,     // Х 0 Ц OK Ц измерение в штатном режиме
  EDF_BREAK = 0x01,        // Х 1 Ц BREAK Ц обрыв линии
  EDF_OVERLOAD_MIN = 0x02,  // Х 2 Ц OVERLOAD_MIN Ц значение ниже диапазона
  EDF_OVERLOAD_MAX = 0x03,  // Х 3 Ц OVERLOAD_MAX Ц значение выше диапазона
} eDataFlags;

// chanStatus parameter values - channel state
typedef enum
{
  EMS_CH_OFF = 0x00,             // Х 0 Ц выключен
  EMS_CH_ON = 0x01,             // Х 1 Ц включен
  EMS_CH_WAIT_CONF = 0x02,    // Х 2 Ц ожидает конфигурации
  EMS_CH_EMS_ERROR = 0x03,    // Х 3 Ц ошибка св¤зи

  EMS_CH_BREAK = 0x04,      // Х 4 Ц датчик не подключЄн
  EMS_CH_WAIT_DATA = 0x05,      // Х 5 Ц ожидание обновлени¤ значени¤ параметра Data
  EMS_CH_DATA_PROCESS = 0x06,   // Х 6 Ц обработка обновлени¤ значени¤ параметра Data

  EMS_CH_ERR_TEMP = 0x08,        // Х 8 - ошибка термопары
  EMS_CH_ERR_EDS = 0x09,        // Х 9 - ошибка датчика окисленности
  EMS_CH_NOFIND_TEMP = 0xA,        // Х 10 - площадка по температуре не найдена
  EMS_CH_NOFIND_EDS = 0xB,      //   Х 11 - площадка по окисленности не найдена
  EMS_CH_NOFIND = 0xC,      //   Х 12 - площадки не найдены
  EMS_CH_FIND = 0xD,      //   Х 13 - площадки найдены
} eMeasStatus;

// deviceStatus parameter values - device Status
typedef enum
{
  EDS_NOINIT = 0x0000,            // ожидание запуска, самодиагностика
  EDS_CONFIG = 0x0001,            // конфигурирование каналов
  EDS_EXECUTE = 0x0002,           // рабочий режим
  EDS_IDLE = 0x0003,              // простаивание режим
  EDS_DEVICE_ERROR = 0x0004,      // ошибка устройства на этапе запуска
} eDeviceStatus;

// deviceState parameter values - device State
typedef enum
{
  EDST_NO_ERR = 0x0000,            // нет ошибок.
  EDST_WRONG_MODEL = 0x0001,       // ћодель устройства не соответствует за¤вленной
  EDST_NO_ADDRESS = 0x0002,            // Ќе определен адрес Modbus
  EDST_NO_SPD = 0x0003,               // Ќе определена скорость Modbus
  EDST_CHAN_FAILURE = 0x0004,         // ќдин из каналов не отвечает
  EDST_CALIB_FAILURE = 0x0005,         // ѕовреждены калибровки
} eDeviceState;

// accessType parameter values
typedef enum
{
    EAT_SERVICE = 0x0001,            // доступ ко всем параметрам только на чтение.
                                     // ”станавливаетс¤ автоматически
    EAT_USER = 0x0002,               // пользовательский уровень
                                     // доступа. Ќекоторые регистры Modbus
                                     // доступны только на чтение.
    EAT_ROOT = 0x0003,               // ROOT Ц полный доступ ко всем
} eAccessType;

// devErrors parameter values
typedef enum
{
   EDE_NO_ERR = (uint16_t)(0),                 // NO ANY device error
   EDE_SERIAL = (uint16_t)(1 << 0),            // SERIAL Ц ошибка серийного номера. Ќомер не записан или поврежден
   EDE_FACTORY = (uint16_t)(1 << 2),           // FACTORY Ц ошибка даты производства.
   EDE_CRC32 = (uint16_t)(1 << 3),             // CRC32 Ц ошибка контрольной суммы.

   EDE_FRAM = (uint16_t)(1 << 6),             //FRAM Ц ќшибка пам¤ти
   EDE_RESERV1 = (uint16_t)(1 << 8),           // Reserved
   EDE_RESERV2 = (uint16_t)(1 << 9),           // Reserved
} eDevErrors;

typedef enum
{
  CN_NOERR = 0,
  CN_ERR_ADC = (uint16_t)(1 << 0),             //ошибка св¤зи с ацп
  CN_ERR_TMP123 = (uint16_t)(1 << 1),    // ошибка св¤зи с tmp123

} eCnErros;

#pragma pack(push, 1)
// Register Structure Definition
typedef struct
{
    // Parameter: Data channel 0 : DataChan0 : NV Address: 0
    float DataChan0;
    // Parameter: Data channel 1 : DataChan1 : NV Address: 0
    float DataChan1;
    // Parameter: Data channel 2 : DataChan2 : NV Address: 0
    float DataChan2;
    // Parameter: Data channel 3 : DataChan3 : NV Address: 0
    float DataChan3;
    // Parameter: Protocol version  : protocolVersion : NV Address: 0
    uint32_t protocolVersion;
    // Parameter: Hardware version  : hardwareVersion : NV Address: 4
    uint32_t hardwareVersion;
    // Parameter: Software Version : softwareVersion : NV Address: 8
    uint32_t softwareVersion;
    // Parameter: Device Type : deviceType : NV Address: 12
    uint16_t deviceType;
    // Parameter: Serial number  : serialNumber : NV Address: 16
    uint32_t serialNumber;
    // Parameter: Up time  : uptime : NV Address: 20
    uint32_t uptime;
    // Parameter: Access type  : accessType : NV Address: 20
    uint16_t accessType;
    // Parameter: Modbus comm count  : mbCommCount : NV Address: 22
    uint32_t mbCommCount;
    // Parameter: Modbus comm error  : mbCommError : NV Address: 22
    uint32_t mbCommError;
    // Parameter: Status : deviceStatus : NV Address: 22
    uint16_t deviceStatus;
    // Parameter: Errors : devErrors : NV Address: 22
    uint16_t devErrors;
    // Parameter: Factory date  : factoryDate : NV Address: 22
    uint32_t factoryDate;
    // Parameter: Software CRC32  : softwareCrc32 : NV Address: 26
    uint32_t softwareCrc32;
    // Parameter: Unique ID  : uniqueId : NV Address: 30
    uint8_t uniqueId[12];
    // Parameter: Mode  : deviceMode : NV Address: 30
    uint16_t deviceMode;
    // Parameter: Data (Measure/Generate)  : chan0Data : NV Address: 30
    float chan0Data;
    // Parameter: Data flags : chan0DataFlags : NV Address: 30
    uint16_t chan0DataFlags;
    // Parameter: Status : chan0Status : NV Address: 30
    uint16_t chan0Status;
    // Parameter: ќшибки канала.  : chan0Error : NV Address: 30
    uint16_t chan0Error;
    // Parameter: Quantity  : chan0Quantity : NV Address: 30
    uint32_t chan0Quantity;
    // Parameter: Uptime  : chan0Uptime : NV Address: 30
    uint32_t chan0Uptime;
    // Parameter: Raw Data : chan0RawData : NV Address: 30
    float chan0RawData;
    // Parameter: Verification read Master : chan0VerificationRead : NV Address: 30
    uint16_t chan0VerificationRead;
    // Parameter: Signal Type : chan0SignalType : NV Address: 30
    uint16_t chan0SignalType;
    // Parameter: Additional parameter1 : chan0AdditionalParameter1 : NV Address: 30
    uint8_t chan0AdditionalParameter1[12];
    // Parameter: Transfer signal low limit  : chan0TransferSignalLowLim : NV Address: 46
    float chan0TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan0TransferSignalHighLim : NV Address: 46
    float chan0TransferSignalHighLim;
    // Parameter: Hi alarm_Reley : chan0ReleyHi : NV Address: 54
    uint16_t chan0ReleyHi;
    // Parameter: Lo alarm_Reley : chan0ReleyLo : NV Address: 56
    uint16_t chan0ReleyLo;
    // Parameter: Time_square_temperature : chan0TimeSquareTemp : NV Address: 58
    float chan0TimeSquareTemp;
    // Parameter: Range_temperature : chan0RangeTemp : NV Address: 58
    float chan0RangeTemp;
    // Parameter: Time_measure_temperature : chan0TimeMeasureTemp : NV Address: 58
    float chan0TimeMeasureTemp;
    // Parameter: Low_lim_temp : chan0LowTemp : NV Address: 58
    uint16_t chan0LowTemp;
    // Parameter: Hi_lim_temp : chan0HiTemp : NV Address: 58
    uint16_t chan0HiTemp;
    // Parameter: Sensor_Type_Activty : chan0SensorType : NV Address: 58
    uint16_t chan0SensorType;
    // Parameter: Time_square_EDS : chan0TimeSquareEDS : NV Address: 58
    float chan0TimeSquareEDS;
    // Parameter: Range_EDS : chan0RangeEDS : NV Address: 58
    float chan0RangeEDS;
    // Parameter: Time_measure_EDS : chan0TimeMeasureEDS : NV Address: 58
    float chan0TimeMeasureEDS;
    // Parameter: —rystallization_temperature : chan0Crystallization : NV Address: 58
    uint16_t chan0Crystallization;
    // Parameter: Mass_coefficient : chan0MassCoeff : NV Address: 58
    uint16_t chan0MassCoeff;
    // Parameter: Final_oxidation : chan0FinalOx : NV Address: 58
    uint16_t chan0FinalOx;
    // Parameter: Assimilation of aluminum : chan0Assimilation : NV Address: 58
    uint16_t chan0Assimilation;
    // Parameter: Mass_melting : chan0MassMelting : NV Address: 58
    uint16_t chan0MassMelting;
    // Parameter: Oxygen_activity : chan0OxActivity : NV Address: 58
    uint16_t chan0OxActivity;
    // Parameter: Mass_Aluminium : chan0MassAl : NV Address: 58
    uint16_t chan0MassAl;
    // Parameter: —arbon_сontent : chan0Carbon : NV Address: 58
    float chan0Carbon;
    // Parameter: Senson_activity_oxygen : chan0PrimaryActivity : NV Address: 58
    float chan0PrimaryActivity;
    // Parameter: Result CJ Value : chan0ResultCjValue : NV Address: 74
    float chan0ResultCjValue;
    // Parameter: TEMP array0 : chan0TEMParray0 : NV Address: 74
    int16_t chan0TEMParray0[64];
    // Parameter: TEMP array1 : chan0TEMParray1 : NV Address: 74
    int16_t chan0TEMParray1[64];
    // Parameter: TEMP array2 : chan0TEMParray2 : NV Address: 74
    int16_t chan0TEMParray2[64];
    // Parameter: TEMP array3 : chan0TEMParray3 : NV Address: 74
    int16_t chan0TEMParray3[64];
    // Parameter: TEMP array4 : chan0TEMParray4 : NV Address: 74
    int16_t chan0TEMParray4[64];
    // Parameter: EMF array0 : chan0EMFarray0 : NV Address: 74
    int16_t chan0EMFarray0[64];
    // Parameter: EMF array1 : chan0EMFarray1 : NV Address: 74
    int16_t chan0EMFarray1[64];
    // Parameter: EMF array2 : chan0EMFarray2 : NV Address: 74
    int16_t chan0EMFarray2[64];
    // Parameter: EMF array3 : chan0EMFarray3 : NV Address: 74
    int16_t chan0EMFarray3[64];
    // Parameter: EMF array4 : chan0EMFarray4 : NV Address: 74
    int16_t chan0EMFarray4[64];
    // Parameter: Data (Measure/Generate)  : chan1Data : NV Address: 74
    float chan1Data;
    // Parameter: Data flags : chan1DataFlags : NV Address: 74
    uint16_t chan1DataFlags;
    // Parameter: Status : chan1Status : NV Address: 74
    uint16_t chan1Status;
    // Parameter: ќшибки канала.  : chan1Error : NV Address: 74
    uint16_t chan1Error;
    // Parameter: Quantity  : chan1Quantity : NV Address: 74
    uint32_t chan1Quantity;
    // Parameter: Uptime  : chan1Uptime : NV Address: 74
    uint32_t chan1Uptime;
    // Parameter: Raw Data : chan1RawData : NV Address: 74
    float chan1RawData;
    // Parameter: Verification read Master : chan1VerificationRead : NV Address: 74
    uint16_t chan1VerificationRead;
    // Parameter: Signal Type : chan1SignalType : NV Address: 74
    uint16_t chan1SignalType;
    // Parameter: Additional parameter1 : chan1AdditionalParameter1 : NV Address: 74
    uint8_t chan1AdditionalParameter1[12];
    // Parameter: Transfer signal low limit  : chan1TransferSignalLowLim : NV Address: 78
    float chan1TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan1TransferSignalHighLim : NV Address: 78
    float chan1TransferSignalHighLim;
    // Parameter: Hi alarm_Reley : chan1ReleyHi : NV Address: 86
    uint16_t chan1ReleyHi;
    // Parameter: Lo alarm_Reley : chan1ReleyLo : NV Address: 88
    uint16_t chan1ReleyLo;
    // Parameter: Time_square_temperature : chan1TimeSquareTemp : NV Address: 90
    float chan1TimeSquareTemp;
    // Parameter: Range_temperature : chan1RangeTemp : NV Address: 90
    float chan1RangeTemp;
    // Parameter: Time_measure_temperature : chan1TimeMeasureTemp : NV Address: 90
    float chan1TimeMeasureTemp;
    // Parameter: Low_lim_temp : chan1LowTemp : NV Address: 90
    uint16_t chan1LowTemp;
    // Parameter: Hi_lim_temp : chan1HiTemp : NV Address: 90
    uint16_t chan1HiTemp;
    // Parameter: Sensor_Type_Activty : chan1SensorType : NV Address: 90
    uint16_t chan1SensorType;
    // Parameter: Time_square_EDS : chan1TimeSquareEDS : NV Address: 90
    float chan1TimeSquareEDS;
    // Parameter: Range_EDS : chan1RangeEDS : NV Address: 90
    float chan1RangeEDS;
    // Parameter: Time_measure_EDS : chan1TimeMeasureEDS : NV Address: 90
    float chan1TimeMeasureEDS;
    // Parameter: —rystallization_temperature : chan1Crystallization : NV Address: 90
    uint16_t chan1Crystallization;
    // Parameter: Mass_coefficient : chan1MassCoeff : NV Address: 90
    uint16_t chan1MassCoeff;
    // Parameter: Final_oxidation : chan1FinalOx : NV Address: 90
    uint16_t chan1FinalOx;
    // Parameter: Assimilation of aluminum : chan1Assimilation : NV Address: 90
    uint16_t chan1Assimilation;
    // Parameter: Mass_melting : chan1MassMelting : NV Address: 90
    uint16_t chan1MassMelting;
    // Parameter: Oxygen_activity : chan1OxActivity : NV Address: 90
    uint16_t chan1OxActivity;
    // Parameter: Mass_Aluminium : chan1MassAl : NV Address: 90
    uint16_t chan1MassAl;
    // Parameter: —arbon_сontent : chan1Carbon : NV Address: 90
    float chan1Carbon;
    // Parameter: Senson_activity_oxygen : chan1PrimaryActivity : NV Address: 90
    float chan1PrimaryActivity;
    // Parameter: Result CJ Value : chan1ResultCjValue : NV Address: 106
    float chan1ResultCjValue;
    // Parameter: TEMP array0 : chan1TEMParray0 : NV Address: 106
    int16_t chan1TEMParray0[64];
    // Parameter: TEMP array1 : chan1TEMParray1 : NV Address: 106
    int16_t chan1TEMParray1[64];
    // Parameter: TEMP array2 : chan1TEMParray2 : NV Address: 106
    int16_t chan1TEMParray2[64];
    // Parameter: TEMP array3 : chan1TEMParray3 : NV Address: 106
    int16_t chan1TEMParray3[64];
    // Parameter: TEMP array4 : chan1TEMParray4 : NV Address: 106
    int16_t chan1TEMParray4[64];
    // Parameter: EMF array0 : chan1EMFarray0 : NV Address: 106
    int16_t chan1EMFarray0[64];
    // Parameter: EMF array1 : chan1EMFarray1 : NV Address: 106
    int16_t chan1EMFarray1[64];
    // Parameter: EMF array2 : chan1EMFarray2 : NV Address: 106
    int16_t chan1EMFarray2[64];
    // Parameter: EMF array3 : chan1EMFarray3 : NV Address: 106
    int16_t chan1EMFarray3[64];
    // Parameter: EMF array4 : chan1EMFarray4 : NV Address: 106
    int16_t chan1EMFarray4[64];
    // Parameter: Data (Measure/Generate)  : chan2Data : NV Address: 106
    float chan2Data;
    // Parameter: Data flags : chan2DataFlags : NV Address: 106
    uint16_t chan2DataFlags;
    // Parameter: Status : chan2Status : NV Address: 106
    uint16_t chan2Status;
    // Parameter: ќшибки канала.  : chan2Error : NV Address: 106
    uint16_t chan2Error;
    // Parameter: Quantity  : chan2Quantity : NV Address: 106
    uint32_t chan2Quantity;
    // Parameter: Uptime  : chan2Uptime : NV Address: 106
    uint32_t chan2Uptime;
    // Parameter: Raw Data : chan2RawData : NV Address: 106
    float chan2RawData;
    // Parameter: Signal Type : chan2SignalType : NV Address: 106
    uint16_t chan2SignalType;
    // Parameter: Additional parameter1 : chan2AdditionalParameter1 : NV Address: 106
    uint8_t chan2AdditionalParameter1[12];
    // Parameter: Transfer signal low limit  : chan2TransferSignalLowLim : NV Address: 122
    float chan2TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan2TransferSignalHighLim : NV Address: 126
    float chan2TransferSignalHighLim;
    // Parameter: Hi alarm_Reley : chan2ReleyHi : NV Address: 138
    uint16_t chan2ReleyHi;
    // Parameter: Lo alarm_Reley : chan2ReleyLo : NV Address: 140
    uint16_t chan2ReleyLo;
    // Parameter: Result CJ Value : chan2ResultCjValue : NV Address: 198
    float chan2ResultCjValue;
    // Parameter: Data (Measure/Generate)  : chan3Data : NV Address: 198
    float chan3Data;
    // Parameter: Data flags : chan3DataFlags : NV Address: 198
    uint16_t chan3DataFlags;
    // Parameter: Status : chan3Status : NV Address: 198
    uint16_t chan3Status;
    // Parameter: ќшибки канала.  : chan3Error : NV Address: 198
    uint16_t chan3Error;
    // Parameter: Quantity  : chan3Quantity : NV Address: 198
    uint32_t chan3Quantity;
    // Parameter: Uptime  : chan3Uptime : NV Address: 198
    uint32_t chan3Uptime;
    // Parameter: Raw Data : chan3RawData : NV Address: 198
    float chan3RawData;
    // Parameter: Signal Type : chan3SignalType : NV Address: 198
    uint16_t chan3SignalType;
    // Parameter: Additional parameter1 : chan3AdditionalParameter1 : NV Address: 198
    uint8_t chan3AdditionalParameter1[12];
    // Parameter: Transfer signal low limit  : chan3TransferSignalLowLim : NV Address: 214
    float chan3TransferSignalLowLim;
    // Parameter: Transfer signal high limit  : chan3TransferSignalHighLim : NV Address: 214
    float chan3TransferSignalHighLim;
    // Parameter: Hi alarm_Reley : chan3ReleyHi : NV Address: 222
    uint16_t chan3ReleyHi;
    // Parameter: Lo alarm_Reley : chan3ReleyLo : NV Address: 222
    uint16_t chan3ReleyLo;
    // Parameter: Result CJ Value : chan3ResultCjValue : NV Address: 278
    float chan3ResultCjValue;
    // Parameter: CalibOCR100mV : chan0OCR100mV : NV Address: 7012
    float chan0OCR100mV;
    // Parameter: CalibFCR100mV : chan0FSR100mV : NV Address: 7016
    float chan0FSR100mV;
    // Parameter: CalibFDate100mV : chan0Date100mV : NV Address: 7020
    uint32_t chan0Date100mV;
    // Parameter: CalibOCR1V : chan0OCR1V : NV Address: 7024
    float chan0OCR1V;
    // Parameter: CalibFCR1V : chan0FSR1V : NV Address: 7028
    float chan0FSR1V;
    // Parameter: CalibFDate1V : chan0Date1V : NV Address: 7032
    uint32_t chan0Date1V;
    // Parameter: CalibOCR10V : chan0OCR10V : NV Address: 7036
    float chan0OCR10V;
    // Parameter: CalibFCR10V : chan0FSR10V : NV Address: 7040
    float chan0FSR10V;
    // Parameter: CalibFDate10V : chan0Date10V : NV Address: 7044
    uint32_t chan0Date10V;
    // Parameter: CalibOCR30V : chan0OCR30V : NV Address: 7048
    float chan0OCR30V;
    // Parameter: CalibFCR30V : chan0FSR30V : NV Address: 7052
    float chan0FSR30V;
    // Parameter: CalibFDate30V : chan0Date30V : NV Address: 7056
    uint32_t chan0Date30V;
    // Parameter: CalibOCR20mA : chan0OCR20mA : NV Address: 7060
    float chan0OCR20mA;
    // Parameter: CalibFCR20mA : chan0FSR20mA : NV Address: 7064
    float chan0FSR20mA;
    // Parameter: CalibFDate20mA : chan0Date20mA : NV Address: 7068
    uint32_t chan0Date20mA;
    // Parameter: CalibOCR4x : chan0OCR4x : NV Address: 7072
    float chan0OCR4x;
    // Parameter: CalibFSR4x : chan0FSR4x : NV Address: 7076
    float chan0FSR4x;
    // Parameter: CalibDate4x : chan0Date4x : NV Address: 7080
    uint32_t chan0Date4x;
    // Parameter: CalibOCR3x : chan0OCR3x : NV Address: 7084
    float chan0OCR3x;
    // Parameter: CalibFSR3x : chan0FSR3x : NV Address: 7088
    float chan0FSR3x;
    // Parameter: CalibDate3x : chan0Date3x : NV Address: 7092
    uint32_t chan0Date3x;
    // Parameter: CalibOCRinternal : chan0OCRinternal : NV Address: 7096
    float chan0OCRinternal;
    // Parameter: CalibFSRinternal : chan0FSRinternal : NV Address: 7100
    float chan0FSRinternal;
    // Parameter: CalibDateinternal : chan0DateRinternal : NV Address: 7104
    uint32_t chan0DateRinternal;
    // Parameter: CalibOCR100mV : chan1OCR100mV : NV Address: 7120
    float chan1OCR100mV;
    // Parameter: CalibFCR100mV : chan1FSR100mV : NV Address: 7124
    float chan1FSR100mV;
    // Parameter: CalibFDate100mV : chan1Date100mV : NV Address: 7128
    uint32_t chan1Date100mV;
    // Parameter: CalibOCR1V : chan1OCR1V : NV Address: 7132
    float chan1OCR1V;
    // Parameter: CalibFCR1V : chan1FSR1V : NV Address: 7136
    float chan1FSR1V;
    // Parameter: CalibFDate1V : chan1Date1V : NV Address: 7140
    uint32_t chan1Date1V;
    // Parameter: CalibOCR10V : chan1OCR10V : NV Address: 7144
    float chan1OCR10V;
    // Parameter: CalibFCR10V : chan1FSR10V : NV Address: 7148
    float chan1FSR10V;
    // Parameter: CalibFDate10V : chan1Date10V : NV Address: 7152
    uint32_t chan1Date10V;
    // Parameter: CalibOCR30V : chan1OCR30V : NV Address: 7156
    float chan1OCR30V;
    // Parameter: CalibFCR30V : chan1FSR30V : NV Address: 7160
    float chan1FSR30V;
    // Parameter: CalibFDate30V : chan1Date30V : NV Address: 7164
    uint32_t chan1Date30V;
    // Parameter: CalibOCR20mA : chan1OCR20mA : NV Address: 7168
    float chan1OCR20mA;
    // Parameter: CalibFCR20mA : chan1FSR20mA : NV Address: 7172
    float chan1FSR20mA;
    // Parameter: CalibFDate20mA : chan1Date20mA : NV Address: 7176
    uint32_t chan1Date20mA;
    // Parameter: CalibOCR4x : chan1OCR4x : NV Address: 7180
    float chan1OCR4x;
    // Parameter: CalibFSR4x : chan1FSR4x : NV Address: 7184
    float chan1FSR4x;
    // Parameter: CalibDate4x : chan1Date4x : NV Address: 7188
    uint32_t chan1Date4x;
    // Parameter: CalibOCR3x : chan1OCR3x : NV Address: 7192
    float chan1OCR3x;
    // Parameter: CalibFSR3x : chan1FSR3x : NV Address: 7196
    float chan1FSR3x;
    // Parameter: CalibDate3x : chan1Date3x : NV Address: 7200
    uint32_t chan1Date3x;
    // Parameter: CalibOCRinternal : chan1OCRinternal : NV Address: 7204
    float chan1OCRinternal;
    // Parameter: CalibFSRinternal : chan1FSRinternal : NV Address: 7208
    float chan1FSRinternal;
    // Parameter: CalibDateinternal : chan1DateRinternal : NV Address: 7212
    uint32_t chan1DateRinternal;
    // Parameter: CalibOCR100mV : chan2OCR100mV : NV Address: 7228
    float chan2OCR100mV;
    // Parameter: CalibFCR100mV : chan2FSR100mV : NV Address: 7232
    float chan2FSR100mV;
    // Parameter: CalibFDate100mV : chan2Date100mV : NV Address: 7236
    uint32_t chan2Date100mV;
    // Parameter: CalibOCR1V : chan2OCR1V : NV Address: 7240
    float chan2OCR1V;
    // Parameter: CalibFCR1V : chan2FSR1V : NV Address: 7244
    float chan2FSR1V;
    // Parameter: CalibFDate1V : chan2Date1V : NV Address: 7248
    uint32_t chan2Date1V;
    // Parameter: CalibOCR10V : chan2OCR10V : NV Address: 7252
    float chan2OCR10V;
    // Parameter: CalibFCR10V : chan2FSR10V : NV Address: 7256
    float chan2FSR10V;
    // Parameter: CalibFDate10V : chan2Date10V : NV Address: 7260
    uint32_t chan2Date10V;
    // Parameter: CalibOCR30V : chan2OCR30V : NV Address: 7264
    float chan2OCR30V;
    // Parameter: CalibFCR30V : chan2FSR30V : NV Address: 7268
    float chan2FSR30V;
    // Parameter: CalibFDate30V : chan2Date30V : NV Address: 7272
    uint32_t chan2Date30V;
    // Parameter: CalibOCR20mA : chan2OCR20mA : NV Address: 7276
    float chan2OCR20mA;
    // Parameter: CalibFCR20mA : chan2FSR20mA : NV Address: 7280
    float chan2FSR20mA;
    // Parameter: CalibFDate20mA : chan2Date20mA : NV Address: 7284
    uint32_t chan2Date20mA;
    // Parameter: CalibOCR4x : chan2OCR4x : NV Address: 7288
    float chan2OCR4x;
    // Parameter: CalibFSR4x : chan2FSR4x : NV Address: 7292
    float chan2FSR4x;
    // Parameter: CalibDate4x : chan2Date4x : NV Address: 7296
    uint32_t chan2Date4x;
    // Parameter: CalibOCR3x : chan2OCR3x : NV Address: 7300
    float chan2OCR3x;
    // Parameter: CalibFSR3x : chan2FSR3x : NV Address: 7304
    float chan2FSR3x;
    // Parameter: CalibDate3x : chan2Date3x : NV Address: 7308
    uint32_t chan2Date3x;
    // Parameter: CalibOCRinternal : chan2OCRinternal : NV Address: 7312
    float chan2OCRinternal;
    // Parameter: CalibFSRinternal : chan2FSRinternal : NV Address: 7316
    float chan2FSRinternal;
    // Parameter: CalibDateinternal : chan2DateRinternal : NV Address: 7320
    uint32_t chan2DateRinternal;
    // Parameter: CalibOCR100mV : chan3OCR100mV : NV Address: 7336
    float chan3OCR100mV;
    // Parameter: CalibFCR100mV : chan3FSR100mV : NV Address: 7340
    float chan3FSR100mV;
    // Parameter: CalibFDate100mV : chan3Date100mV : NV Address: 7344
    uint32_t chan3Date100mV;
    // Parameter: CalibOCR1V : chan3OCR1V : NV Address: 7348
    float chan3OCR1V;
    // Parameter: CalibFCR1V : chan3FSR1V : NV Address: 7352
    float chan3FSR1V;
    // Parameter: CalibFDate1V : chan3Date1V : NV Address: 7356
    uint32_t chan3Date1V;
    // Parameter: CalibOCR10V : chan3OCR10V : NV Address: 7360
    float chan3OCR10V;
    // Parameter: CalibFCR10V : chan3FSR10V : NV Address: 7364
    float chan3FSR10V;
    // Parameter: CalibFDate10V : chan3Date10V : NV Address: 7368
    uint32_t chan3Date10V;
    // Parameter: CalibOCR30V : chan3OCR30V : NV Address: 7372
    float chan3OCR30V;
    // Parameter: CalibFCR30V : chan3FSR30V : NV Address: 7376
    float chan3FSR30V;
    // Parameter: CalibFDate30V : chan3Date30V : NV Address: 7380
    uint32_t chan3Date30V;
    // Parameter: CalibOCR20mA : chan3OCR20mA : NV Address: 7384
    float chan3OCR20mA;
    // Parameter: CalibFCR20mA : chan3FSR20mA : NV Address: 7388
    float chan3FSR20mA;
    // Parameter: CalibFDate20mA : chan3Date20mA : NV Address: 7392
    uint32_t chan3Date20mA;
    // Parameter: CalibOCR4x : chan3OCR4x : NV Address: 7396
    float chan3OCR4x;
    // Parameter: CalibFSR4x : chan3FSR4x : NV Address: 7400
    float chan3FSR4x;
    // Parameter: CalibDate4x : chan3Date4x : NV Address: 7404
    uint32_t chan3Date4x;
    // Parameter: CalibOCR3x : chan3OCR3x : NV Address: 7408
    float chan3OCR3x;
    // Parameter: CalibFSR3x : chan3FSR3x : NV Address: 7412
    float chan3FSR3x;
    // Parameter: CalibDate3x : chan3Date3x : NV Address: 7416
    uint32_t chan3Date3x;
    // Parameter: CalibOCRinternal : chan3OCRinternal : NV Address: 7420
    float chan3OCRinternal;
    // Parameter: CalibFSRinternal : chan3FSRinternal : NV Address: 7424
    float chan3FSRinternal;
    // Parameter: CalibDateinternal : chan3DateRinternal : NV Address: 7428
    uint32_t chan3DateRinternal;
    // Parameter: DigitalData : chan0DigitalData : NV Address: 282
    float chan0DigitalData;
    // Parameter: SignalType(Digital) : chan0DigitSignalType : NV Address: 282
    uint16_t chan0DigitSignalType;
    // Parameter: TimeDamping : chan0DigitDamping : NV Address: 282
    uint16_t chan0DigitDamping;
    // Parameter: Hi alarm_Reley : chan0DigitalReleyHi : NV Address: 294
    uint16_t chan0DigitalReleyHi;
    // Parameter: Lo alarm_Reley : chan0DigitalReleyLo : NV Address: 294
    uint16_t chan0DigitalReleyLo;
    // Parameter: DigitalData : chan1DigitalData : NV Address: 294
    float chan1DigitalData;
    // Parameter: SignalType(Digital) : chan1DigitSignalType : NV Address: 294
    uint16_t chan1DigitSignalType;
    // Parameter: TimeDamping : chan1DigitDamping : NV Address: 294
    uint16_t chan1DigitDamping;
    // Parameter: Hi alarm_Reley : chan1DigitalReleyHi : NV Address: 306
    uint16_t chan1DigitalReleyHi;
    // Parameter: Lo alarm_Reley : chan1DigitalReleyLo : NV Address: 306
    uint16_t chan1DigitalReleyLo;
    // Parameter: DigitalData : chan2DigitalData : NV Address: 306
    float chan2DigitalData;
    // Parameter: SignalType(Digital) : chan2DigitSignalType : NV Address: 306
    uint16_t chan2DigitSignalType;
    // Parameter: TimeDamping : chan2DigitDamping : NV Address: 306
    uint16_t chan2DigitDamping;
    // Parameter: Hi alarm_Reley : chan2DigitalReleyHi : NV Address: 318
    uint16_t chan2DigitalReleyHi;
    // Parameter: Lo alarm_Reley : chan2DigitalReleyLo : NV Address: 318
    uint16_t chan2DigitalReleyLo;
    // Parameter: DigitalData : chan3DigitalData : NV Address: 318
    float chan3DigitalData;
    // Parameter: SignalType(Digital) : chan3DigitSignalType : NV Address: 318
    uint16_t chan3DigitSignalType;
    // Parameter: TimeDamping : chan3DigitDamping : NV Address: 318
    uint16_t chan3DigitDamping;
    // Parameter: Hi alarm_Reley : chan3DigitalReleyHi : NV Address: 330
    uint16_t chan3DigitalReleyHi;
    // Parameter: Lo alarm_Reley : chan3DigitalReleyLo : NV Address: 330
    uint16_t chan3DigitalReleyLo;
    // Parameter: DigitalData : chan4DigitalData : NV Address: 330
    float chan4DigitalData;
    // Parameter: SignalType(Digital) : chan4DigitSignalType : NV Address: 330
    uint16_t chan4DigitSignalType;
    // Parameter: TimeDamping : chan4DigitDamping : NV Address: 330
    uint16_t chan4DigitDamping;
    // Parameter: Hi alarm_Reley : chan4DigitalReleyHi : NV Address: 342
    uint16_t chan4DigitalReleyHi;
    // Parameter: Lo alarm_Reley : chan4DigitalReleyLo : NV Address: 342
    uint16_t chan4DigitalReleyLo;
    // Parameter: DigitalData : chan5DigitalData : NV Address: 342
    float chan5DigitalData;
    // Parameter: SignalType(Digital) : chan5DigitSignalType : NV Address: 342
    uint16_t chan5DigitSignalType;
    // Parameter: TimeDamping : chan5DigitDamping : NV Address: 342
    uint16_t chan5DigitDamping;
    // Parameter: Hi alarm_Reley : chan5DigitalReleyHi : NV Address: 354
    uint16_t chan5DigitalReleyHi;
    // Parameter: Lo alarm_Reley : chan5DigitalReleyLo : NV Address: 354
    uint16_t chan5DigitalReleyLo;
} tDeviceBasicParams;
#pragma pack(pop)
#define PAR_HELPER(fmt, ...) printf(fmt " \ n%; s; ", __VA_ARGS__)
#define PAR(...) PAR_HELPER(__VA_ARGS__, ")
#define PAR_PREF(...) (*(&(g_deviceDataStorage.##__VA_ARGS__##)))
#define DEVICE_PAR(param) &(g_deviceDataStorage.##param)
#define DEVICE_PAR_VOID(param) ((void*)&(g_deviceDataStorage.##param))
#endif // !defined(_DEVICE_PARAMS)


